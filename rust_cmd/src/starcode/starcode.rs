#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case, non_upper_case_globals, unused_assignments, unused_mut)]
#![feature(extern_types)]
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    static mut stdout: *mut FILE;
    static mut stderr: *mut FILE;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn snprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ...
    ) -> libc::c_int;
    fn sscanf(_: *const libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn fgetc(__stream: *mut FILE) -> libc::c_int;
    fn __getdelim(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut size_t,
        __delimiter: libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
    fn ungetc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
    fn __errno_location() -> *mut libc::c_int;
    fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> libc::c_int;
    fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> libc::c_int;
    fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> libc::c_int;
    fn pthread_detach(__th: pthread_t) -> libc::c_int;
    fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> libc::c_int;
    fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: Option::<
            unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
        >,
        __arg: *mut libc::c_void,
    ) -> libc::c_int;
    fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut libc::c_void,
    ) -> libc::c_int;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn free(__ptr: *mut libc::c_void);
    fn abort() -> !;
    fn qsort(
        __base: *mut libc::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
    fn strncpy(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> *mut libc::c_char;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn strstr(_: *const libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
    fn strrchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strsep(
        __stringp: *mut *mut libc::c_char,
        __delim: *const libc::c_char,
    ) -> *mut libc::c_char;
    fn strerror(_: libc::c_int) -> *mut libc::c_char;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    static TOWER_TOP: *mut gstack_t;
    fn destroy_tower(_: *mut *mut gstack_t);
    fn insert_string_wo_malloc(
        _: *mut trie_t,
        _: *const libc::c_char,
        _: *mut *mut node_t,
    ) -> *mut *mut libc::c_void;
    fn new_gstack() -> *mut gstack_t;
    fn new_tower(_: libc::c_int) -> *mut *mut gstack_t;
    fn new_trie(_: libc::c_uint) -> *mut trie_t;
    fn search(
        _: *mut trie_t,
        _: *const libc::c_char,
        _: libc::c_int,
        _: *mut *mut gstack_t,
        _: libc::c_int,
        _: libc::c_int,
    ) -> libc::c_int;
    fn push(_: *mut libc::c_void, _: *mut *mut gstack_t) -> libc::c_int;
}
pub type size_t = libc::c_ulong;
pub type __uint8_t = libc::c_uchar;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __ssize_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type ssize_t = __ssize_t;
pub type output_t = libc::c_uint;
pub const TIDY_OUTPUT: output_t = 3;
pub const NRED_OUTPUT: output_t = 2;
pub const CLUSTER_OUTPUT: output_t = 1;
pub const DEFAULT_OUTPUT: output_t = 0;
pub type cluster_t = libc::c_uint;
pub const COMPONENTS_CLUSTER: cluster_t = 2;
pub const SPHERES_CLUSTER: cluster_t = 1;
pub const MP_CLUSTER: cluster_t = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct gstack_t {
    pub nslots: size_t,
    pub nitems: size_t,
    pub items: [*mut libc::c_void; 0],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct useq_t {
    pub count: ssize_t,
    pub nids: libc::c_uint,
    pub sphere_c: ssize_t,
    pub sphere_d: ssize_t,
    pub seq: *mut libc::c_char,
    pub info: *mut libc::c_char,
    pub matches: *mut *mut gstack_t,
    pub canonical: *mut useq_t,
    pub seqid: *mut libc::c_int,
}
pub type uint8_t = __uint8_t;
pub const PE_FASTQ: format_t = 3;
pub type format_t = libc::c_uint;
pub const UNSET: format_t = 4;
pub const RAW: format_t = 2;
pub const FASTQ: format_t = 1;
pub const FASTA: format_t = 0;
pub type __compar_fn_t = Option::<
    unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct idstack_t {
    pub pos: size_t,
    pub max: size_t,
    pub elm: *mut libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct propt_t {
    pub first: [libc::c_char; 5],
    pub pe_fastq: libc::c_int,
    pub showclusters: libc::c_int,
    pub showids: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mtplan_t {
    pub active: libc::c_char,
    pub ntries: libc::c_int,
    pub jobsdone: libc::c_int,
    pub tries: *mut mttrie_t,
    pub mutex: *mut pthread_mutex_t,
    pub monitor: *mut pthread_cond_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [libc::c_char; 48],
    pub __align: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_cond_s {
    pub c2rust_unnamed: C2RustUnnamed_1,
    pub c2rust_unnamed_0: C2RustUnnamed,
    pub __g_refs: [libc::c_uint; 2],
    pub __g_size: [libc::c_uint; 2],
    pub __g1_orig_size: libc::c_uint,
    pub __wrefs: libc::c_uint,
    pub __g_signals: [libc::c_uint; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed {
    pub __g1_start: libc::c_ulonglong,
    pub __g1_start32: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub __low: libc::c_uint,
    pub __high: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_1 {
    pub __wseq: libc::c_ulonglong,
    pub __wseq32: C2RustUnnamed_2,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub __low: libc::c_uint,
    pub __high: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [libc::c_char; 40],
    pub __align: libc::c_long,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_mutex_s {
    pub __lock: libc::c_int,
    pub __count: libc::c_uint,
    pub __owner: libc::c_int,
    pub __nusers: libc::c_uint,
    pub __kind: libc::c_int,
    pub __spins: libc::c_short,
    pub __elision: libc::c_short,
    pub __list: __pthread_list_t,
}
pub type __pthread_list_t = __pthread_internal_list;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mttrie_t {
    pub flag: libc::c_char,
    pub currentjob: libc::c_int,
    pub njobs: libc::c_int,
    pub jobs: *mut mtjob_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mtjob_t {
    pub start: libc::c_int,
    pub end: libc::c_int,
    pub tau: libc::c_int,
    pub build: libc::c_int,
    pub queryid: libc::c_int,
    pub trieid: libc::c_int,
    pub useqS: *mut gstack_t,
    pub trie: *mut trie_t,
    pub node_pos: *mut node_t,
    pub lut: *mut lookup_t,
    pub mutex: *mut pthread_mutex_t,
    pub monitor: *mut pthread_cond_t,
    pub jobsdone: *mut libc::c_int,
    pub trieflag: *mut libc::c_char,
    pub active: *mut libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct lookup_t {
    pub slen: libc::c_int,
    pub kmers: libc::c_int,
    pub klen: *mut libc::c_int,
    pub lut: [*mut libc::c_uchar; 0],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct node_t {
    pub child: [*mut libc::c_void; 6],
    pub path: uint32_t,
    pub cache: [libc::c_char; 17],
}
pub type uint32_t = __uint32_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trie_t {
    pub root: *mut node_t,
    pub info: *mut info_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct info_t {
    pub height: libc::c_uint,
    pub pebbles: *mut *mut gstack_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_condattr_t {
    pub __size: [libc::c_char; 4],
    pub __align: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_mutexattr_t {
    pub __size: [libc::c_char; 4],
    pub __align: libc::c_int,
}
pub type pthread_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [libc::c_char; 56],
    pub __align: libc::c_long,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sortargs_t {
    pub buf0: *mut *mut useq_t,
    pub buf1: *mut *mut useq_t,
    pub size: ssize_t,
    pub b: int64_t,
    pub thread: libc::c_int,
    pub repeats: ssize_t,
}
pub type int64_t = __int64_t;
#[inline]
unsafe extern "C" fn getline(
    mut __lineptr: *mut *mut libc::c_char,
    mut __n: *mut size_t,
    mut __stream: *mut FILE,
) -> __ssize_t {
    return __getdelim(__lineptr, __n, '\n' as i32, __stream);
}
static mut valid_DNA_char: [libc::c_int; 256] = [
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    1 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
    0 as libc::c_int,
];
static mut capitalize: [libc::c_char; 128] = [
    0 as libc::c_int as libc::c_char,
    1 as libc::c_int as libc::c_char,
    2 as libc::c_int as libc::c_char,
    3 as libc::c_int as libc::c_char,
    4 as libc::c_int as libc::c_char,
    5 as libc::c_int as libc::c_char,
    6 as libc::c_int as libc::c_char,
    7 as libc::c_int as libc::c_char,
    8 as libc::c_int as libc::c_char,
    9 as libc::c_int as libc::c_char,
    10 as libc::c_int as libc::c_char,
    11 as libc::c_int as libc::c_char,
    12 as libc::c_int as libc::c_char,
    13 as libc::c_int as libc::c_char,
    14 as libc::c_int as libc::c_char,
    15 as libc::c_int as libc::c_char,
    16 as libc::c_int as libc::c_char,
    17 as libc::c_int as libc::c_char,
    18 as libc::c_int as libc::c_char,
    19 as libc::c_int as libc::c_char,
    20 as libc::c_int as libc::c_char,
    21 as libc::c_int as libc::c_char,
    22 as libc::c_int as libc::c_char,
    23 as libc::c_int as libc::c_char,
    24 as libc::c_int as libc::c_char,
    25 as libc::c_int as libc::c_char,
    26 as libc::c_int as libc::c_char,
    27 as libc::c_int as libc::c_char,
    28 as libc::c_int as libc::c_char,
    29 as libc::c_int as libc::c_char,
    30 as libc::c_int as libc::c_char,
    31 as libc::c_int as libc::c_char,
    32 as libc::c_int as libc::c_char,
    33 as libc::c_int as libc::c_char,
    34 as libc::c_int as libc::c_char,
    35 as libc::c_int as libc::c_char,
    36 as libc::c_int as libc::c_char,
    37 as libc::c_int as libc::c_char,
    38 as libc::c_int as libc::c_char,
    39 as libc::c_int as libc::c_char,
    40 as libc::c_int as libc::c_char,
    41 as libc::c_int as libc::c_char,
    42 as libc::c_int as libc::c_char,
    43 as libc::c_int as libc::c_char,
    44 as libc::c_int as libc::c_char,
    45 as libc::c_int as libc::c_char,
    46 as libc::c_int as libc::c_char,
    47 as libc::c_int as libc::c_char,
    48 as libc::c_int as libc::c_char,
    49 as libc::c_int as libc::c_char,
    50 as libc::c_int as libc::c_char,
    51 as libc::c_int as libc::c_char,
    52 as libc::c_int as libc::c_char,
    53 as libc::c_int as libc::c_char,
    54 as libc::c_int as libc::c_char,
    55 as libc::c_int as libc::c_char,
    56 as libc::c_int as libc::c_char,
    57 as libc::c_int as libc::c_char,
    58 as libc::c_int as libc::c_char,
    59 as libc::c_int as libc::c_char,
    60 as libc::c_int as libc::c_char,
    61 as libc::c_int as libc::c_char,
    62 as libc::c_int as libc::c_char,
    63 as libc::c_int as libc::c_char,
    64 as libc::c_int as libc::c_char,
    65 as libc::c_int as libc::c_char,
    66 as libc::c_int as libc::c_char,
    67 as libc::c_int as libc::c_char,
    68 as libc::c_int as libc::c_char,
    69 as libc::c_int as libc::c_char,
    70 as libc::c_int as libc::c_char,
    71 as libc::c_int as libc::c_char,
    72 as libc::c_int as libc::c_char,
    73 as libc::c_int as libc::c_char,
    74 as libc::c_int as libc::c_char,
    75 as libc::c_int as libc::c_char,
    76 as libc::c_int as libc::c_char,
    77 as libc::c_int as libc::c_char,
    78 as libc::c_int as libc::c_char,
    79 as libc::c_int as libc::c_char,
    80 as libc::c_int as libc::c_char,
    81 as libc::c_int as libc::c_char,
    82 as libc::c_int as libc::c_char,
    83 as libc::c_int as libc::c_char,
    84 as libc::c_int as libc::c_char,
    85 as libc::c_int as libc::c_char,
    86 as libc::c_int as libc::c_char,
    87 as libc::c_int as libc::c_char,
    88 as libc::c_int as libc::c_char,
    89 as libc::c_int as libc::c_char,
    90 as libc::c_int as libc::c_char,
    91 as libc::c_int as libc::c_char,
    92 as libc::c_int as libc::c_char,
    93 as libc::c_int as libc::c_char,
    94 as libc::c_int as libc::c_char,
    95 as libc::c_int as libc::c_char,
    96 as libc::c_int as libc::c_char,
    65 as libc::c_int as libc::c_char,
    66 as libc::c_int as libc::c_char,
    67 as libc::c_int as libc::c_char,
    68 as libc::c_int as libc::c_char,
    69 as libc::c_int as libc::c_char,
    70 as libc::c_int as libc::c_char,
    71 as libc::c_int as libc::c_char,
    72 as libc::c_int as libc::c_char,
    73 as libc::c_int as libc::c_char,
    74 as libc::c_int as libc::c_char,
    75 as libc::c_int as libc::c_char,
    76 as libc::c_int as libc::c_char,
    77 as libc::c_int as libc::c_char,
    78 as libc::c_int as libc::c_char,
    79 as libc::c_int as libc::c_char,
    80 as libc::c_int as libc::c_char,
    81 as libc::c_int as libc::c_char,
    82 as libc::c_int as libc::c_char,
    83 as libc::c_int as libc::c_char,
    84 as libc::c_int as libc::c_char,
    85 as libc::c_int as libc::c_char,
    86 as libc::c_int as libc::c_char,
    87 as libc::c_int as libc::c_char,
    88 as libc::c_int as libc::c_char,
    89 as libc::c_int as libc::c_char,
    90 as libc::c_int as libc::c_char,
    123 as libc::c_int as libc::c_char,
    124 as libc::c_int as libc::c_char,
    125 as libc::c_int as libc::c_char,
    126 as libc::c_int as libc::c_char,
    127 as libc::c_int as libc::c_char,
];
static mut OUTPUTF1: *mut FILE = 0 as *const FILE as *mut FILE;
static mut OUTPUTF2: *mut FILE = 0 as *const FILE as *mut FILE;
static mut FORMAT: format_t = UNSET;
static mut OUTPUTT: output_t = DEFAULT_OUTPUT;
static mut CLUSTERALG: cluster_t = MP_CLUSTER;
static mut CLUSTER_RATIO: libc::c_double = 5.0f64;
#[no_mangle]
pub unsafe extern "C" fn head_default(mut u: *mut useq_t, mut propt: propt_t) {
    let mut cncal: *mut useq_t = (*u).canonical;
    let mut seq: *mut libc::c_char = if propt.pe_fastq != 0 {
        (*cncal).info
    } else {
        (*cncal).seq
    };
    fprintf(
        OUTPUTF1,
        b"%s%s\t%ld\0" as *const u8 as *const libc::c_char,
        (propt.first).as_mut_ptr(),
        seq,
        (*cncal).count,
    );
    if propt.showclusters != 0 {
        let mut seq_0: *mut libc::c_char = if propt.pe_fastq != 0 {
            (*u).info
        } else {
            (*u).seq
        };
        fprintf(OUTPUTF1, b"\t%s\0" as *const u8 as *const libc::c_char, seq_0);
    }
}
#[no_mangle]
pub unsafe extern "C" fn members_mp_default(mut u: *mut useq_t, mut propt: propt_t) {
    if propt.showclusters == 0 {
        return;
    }
    let mut seq: *mut libc::c_char = if propt.pe_fastq != 0 {
        (*u).info
    } else {
        (*u).seq
    };
    fprintf(OUTPUTF1, b",%s\0" as *const u8 as *const libc::c_char, seq);
}
#[no_mangle]
pub unsafe extern "C" fn members_sc_default(mut u: *mut useq_t, mut propt: propt_t) {
    if propt.showclusters == 0 || ((*u).matches).is_null() {
        return;
    }
    let mut hits: *mut gstack_t = 0 as *mut gstack_t;
    let mut j: libc::c_int = 0 as libc::c_int;
    loop {
        hits = *((*u).matches).offset(j as isize);
        if !(hits != TOWER_TOP) {
            break;
        }
        let mut k: size_t = 0 as libc::c_int as size_t;
        while k < (*hits).nitems {
            let mut match_0: *mut useq_t = *((*hits).items)
                .as_mut_ptr()
                .offset(k as isize) as *mut useq_t;
            if !((*match_0).canonical != u) {
                let mut seq: *mut libc::c_char = if propt.pe_fastq != 0 {
                    (*match_0).seq
                } else {
                    (*u).seq
                };
                fprintf(OUTPUTF1, b",%s\0" as *const u8 as *const libc::c_char, seq);
            }
            k = k.wrapping_add(1);
            k;
        }
        j += 1;
        j;
    };
}
#[no_mangle]
pub unsafe extern "C" fn sort_and_print_ids(mut stack: *mut idstack_t) {
    qsort(
        (*stack).elm as *mut libc::c_void,
        (*stack).pos,
        ::core::mem::size_of::<libc::c_int>() as libc::c_ulong,
        Some(
            int_ascending
                as unsafe extern "C" fn(
                    *const libc::c_void,
                    *const libc::c_void,
                ) -> libc::c_int,
        ),
    );
    fprintf(
        OUTPUTF1,
        b"\t%u\0" as *const u8 as *const libc::c_char,
        *((*stack).elm).offset(0 as libc::c_int as isize),
    );
    let mut k: libc::c_uint = 1 as libc::c_int as libc::c_uint;
    while (k as libc::c_ulong) < (*stack).pos {
        fprintf(
            OUTPUTF1,
            b",%u\0" as *const u8 as *const libc::c_char,
            *((*stack).elm).offset(k as isize),
        );
        k = k.wrapping_add(1);
        k;
    }
}
#[no_mangle]
pub unsafe extern "C" fn sort_and_print_ids_perread(
    mut stack: *mut idstack_t,
    mut canonical: *mut useq_t,
    mut showids: libc::c_int,
) {
    qsort(
        (*stack).elm as *mut libc::c_void,
        (*stack).pos,
        ::core::mem::size_of::<libc::c_int>() as libc::c_ulong,
        Some(
            int_ascending
                as unsafe extern "C" fn(
                    *const libc::c_void,
                    *const libc::c_void,
                ) -> libc::c_int,
        ),
    );
    let mut k: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    while (k as libc::c_ulong) < (*stack).pos {
        fprintf(OUTPUTF1, b"%s\0" as *const u8 as *const libc::c_char, (*canonical).seq);
        if showids != 0 {
            fprintf(
                OUTPUTF1,
                b"\t%u\0" as *const u8 as *const libc::c_char,
                *((*stack).elm).offset(k as isize),
            );
        }
        fprintf(OUTPUTF1, b"\n\0" as *const u8 as *const libc::c_char);
        k = k.wrapping_add(1);
        k;
    }
}
#[no_mangle]
pub unsafe extern "C" fn print_nr_raw(mut u: *mut useq_t) {
    fprintf(OUTPUTF1, b"%s\n\0" as *const u8 as *const libc::c_char, (*u).seq);
}
#[no_mangle]
pub unsafe extern "C" fn print_nr_fasta(mut u: *mut useq_t) {
    fprintf(
        OUTPUTF1,
        b"%s\n%s\n\0" as *const u8 as *const libc::c_char,
        (*u).info,
        (*u).seq,
    );
}
#[no_mangle]
pub unsafe extern "C" fn print_nr_fastq(mut u: *mut useq_t) {
    let mut header: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut quality: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    sscanf(
        (*u).info,
        b"%s\n%s\0" as *const u8 as *const libc::c_char,
        header.as_mut_ptr(),
        quality.as_mut_ptr(),
    );
    fprintf(
        OUTPUTF1,
        b"%s\n%s\n+\n%s\n\0" as *const u8 as *const libc::c_char,
        header.as_mut_ptr(),
        (*u).seq,
        quality.as_mut_ptr(),
    );
}
#[no_mangle]
pub unsafe extern "C" fn print_nr_pe_fastq(mut u: *mut useq_t) {
    let mut head1: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut head2: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut qual1: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut qual2: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut seq1: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut seq2: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut c: *mut libc::c_char = strrchr((*u).seq, '-' as i32);
    if c.is_null()
        || c.offset_from((*u).seq) as libc::c_long > 1023 as libc::c_int as libc::c_long
    {
        return;
    }
    strncpy(
        seq1.as_mut_ptr(),
        (*u).seq,
        (c.offset_from((*u).seq) as libc::c_long - 8 as libc::c_int as libc::c_long)
            as libc::c_ulong,
    );
    strncpy(
        seq2.as_mut_ptr(),
        c.offset(1 as libc::c_int as isize),
        1023 as libc::c_int as libc::c_ulong,
    );
    let mut c_0: *mut libc::c_char = (*u).info;
    strncpy(
        head1.as_mut_ptr(),
        strsep(&mut c_0, b"\n\0" as *const u8 as *const libc::c_char),
        1023 as libc::c_int as libc::c_ulong,
    );
    strncpy(
        qual1.as_mut_ptr(),
        strsep(&mut c_0, b"\n\0" as *const u8 as *const libc::c_char),
        1023 as libc::c_int as libc::c_ulong,
    );
    strncpy(
        head2.as_mut_ptr(),
        strsep(&mut c_0, b"\n\0" as *const u8 as *const libc::c_char),
        1023 as libc::c_int as libc::c_ulong,
    );
    strncpy(
        qual2.as_mut_ptr(),
        strsep(&mut c_0, b"\n\0" as *const u8 as *const libc::c_char),
        1023 as libc::c_int as libc::c_ulong,
    );
    fprintf(
        OUTPUTF1,
        b"%s\n%s\n+\n%s\n\0" as *const u8 as *const libc::c_char,
        head1.as_mut_ptr(),
        seq1.as_mut_ptr(),
        qual1.as_mut_ptr(),
    );
    fprintf(
        OUTPUTF2,
        b"%s\n%s\n+\n%s\n\0" as *const u8 as *const libc::c_char,
        head2.as_mut_ptr(),
        seq2.as_mut_ptr(),
        qual2.as_mut_ptr(),
    );
}
#[no_mangle]
pub unsafe extern "C" fn print_tidy(
    nseq: libc::c_long,
    mut uSQ: *const gstack_t,
    is_pe_fastq: libc::c_int,
) {
    let mut outputseq: *mut *mut useq_t = calloc(
        ::core::mem::size_of::<*mut useq_t>() as libc::c_ulong,
        nseq as libc::c_ulong,
    ) as *mut *mut useq_t;
    if outputseq.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 11], &[libc::c_char; 11]>(b"print_tidy\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            360 as libc::c_int,
        );
        krash();
    }
    let mut i: size_t = 0 as libc::c_int as size_t;
    while i < (*uSQ).nitems {
        let mut u: *mut useq_t = *((*uSQ).items).as_ptr().offset(i as isize)
            as *mut useq_t;
        let mut j: libc::c_uint = 0 as libc::c_int as libc::c_uint;
        while j < (*u).nids {
            let ref mut fresh0 = *outputseq
                .offset((*((*u).seqid).offset(j as isize) - 1 as libc::c_int) as isize);
            *fresh0 = u;
            j = j.wrapping_add(1);
            j;
        }
        i = i.wrapping_add(1);
        i;
    }
    let mut sep: [libc::c_char; 10] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    memset(
        sep.as_mut_ptr() as *mut libc::c_void,
        '-' as i32,
        (8 as libc::c_int + 1 as libc::c_int) as libc::c_ulong,
    );
    let mut i_0: libc::c_long = 0 as libc::c_int as libc::c_long;
    while i_0 < nseq {
        let mut u_0: *mut useq_t = *outputseq.offset(i_0 as isize);
        if u_0.is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<
                    &[u8; 11],
                    &[libc::c_char; 11],
                >(b"print_tidy\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                379 as libc::c_int,
            );
            krash();
        }
        if is_pe_fastq != 0 {
            let mut seq2: *mut libc::c_char = strstr((*u_0).seq, sep.as_mut_ptr());
            let mut can2: *mut libc::c_char = strstr(
                (*(*u_0).canonical).seq,
                sep.as_mut_ptr(),
            );
            if seq2.is_null() || can2.is_null() {
                fprintf(
                    stderr,
                    b"%s\n\0" as *const u8 as *const libc::c_char,
                    (*u_0).seq,
                );
                fprintf(
                    stderr,
                    b"%s\n\0" as *const u8 as *const libc::c_char,
                    (*(*u_0).canonical).seq,
                );
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 11],
                        &[libc::c_char; 11],
                    >(b"print_tidy\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    388 as libc::c_int,
                );
                krash();
            }
            let ref mut fresh1 = *can2.offset(0 as libc::c_int as isize);
            *fresh1 = '\0' as i32 as libc::c_char;
            *seq2.offset(0 as libc::c_int as isize) = *fresh1;
            fprintf(
                stdout,
                b"%s/%s\t%s/%s\n\0" as *const u8 as *const libc::c_char,
                (*u_0).seq,
                seq2.offset(8 as libc::c_int as isize).offset(1 as libc::c_int as isize),
                (*(*u_0).canonical).seq,
                can2.offset(8 as libc::c_int as isize).offset(1 as libc::c_int as isize),
            );
            let ref mut fresh2 = *can2.offset(0 as libc::c_int as isize);
            *fresh2 = '-' as i32 as libc::c_char;
            *seq2.offset(0 as libc::c_int as isize) = *fresh2;
        } else {
            fprintf(
                stdout,
                b"%s\t%s\n\0" as *const u8 as *const libc::c_char,
                (*u_0).seq,
                (*(*u_0).canonical).seq,
            );
        }
        i_0 += 1;
        i_0;
    }
    free(outputseq as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn starcode(
    mut inputf1: *mut FILE,
    mut inputf2: *mut FILE,
    mut outputf1: *mut FILE,
    mut outputf2: *mut FILE,
    mut tau: libc::c_int,
    verbose: libc::c_int,
    mut thrmax: libc::c_int,
    clusteralg: libc::c_int,
    mut parent_to_child: libc::c_double,
    showclusters: libc::c_int,
    showids: libc::c_int,
    outputt: libc::c_int,
) -> libc::c_int {
    OUTPUTF1 = outputf1;
    OUTPUTF2 = outputf2;
    OUTPUTT = outputt as output_t;
    CLUSTERALG = clusteralg as cluster_t;
    CLUSTER_RATIO = parent_to_child;
    if verbose != 0 {
        fprintf(
            stderr,
            b"running %s (last revised %s) with %d thread%s\n\0" as *const u8
                as *const libc::c_char,
            b"starcode-v1.4\0" as *const u8 as *const libc::c_char,
            b"2021-09-22\0" as *const u8 as *const libc::c_char,
            thrmax,
            if thrmax > 1 as libc::c_int {
                b"s\0" as *const u8 as *const libc::c_char
            } else {
                b"\0" as *const u8 as *const libc::c_char
            },
        );
        fprintf(stderr, b"reading input files\n\0" as *const u8 as *const libc::c_char);
    }
    let mut uSQ: *mut gstack_t = read_file(inputf1, inputf2, verbose);
    if uSQ.is_null() || (*uSQ).nitems < 1 as libc::c_int as libc::c_ulong {
        fprintf(stderr, b"input file empty\n\0" as *const u8 as *const libc::c_char);
        return 1 as libc::c_int;
    }
    let nseq: libc::c_long = (*uSQ).nitems as libc::c_long;
    if verbose != 0 {
        fprintf(stderr, b"sorting\n\0" as *const u8 as *const libc::c_char);
    }
    (*uSQ)
        .nitems = seqsort(
        ((*uSQ).items).as_mut_ptr() as *mut *mut useq_t,
        (*uSQ).nitems,
        thrmax,
    );
    let mut ntries: size_t = (3 as libc::c_int * thrmax
        + (thrmax % 2 as libc::c_int == 0 as libc::c_int) as libc::c_int) as size_t;
    if (*uSQ).nitems < ntries {
        ntries = 1 as libc::c_int as size_t;
        thrmax = 1 as libc::c_int;
    }
    let mut med: libc::c_int = -(1 as libc::c_int);
    let mut height: libc::c_int = pad_useq(uSQ, &mut med);
    if tau < 0 as libc::c_int {
        tau = if med > 160 as libc::c_int {
            8 as libc::c_int
        } else {
            2 as libc::c_int + med / 30 as libc::c_int
        };
        if verbose != 0 {
            fprintf(
                stderr,
                b"setting dist to %d\n\0" as *const u8 as *const libc::c_char,
                tau,
            );
        }
    }
    let mut mtplan: *mut mtplan_t = plan_mt(
        tau,
        height,
        med,
        ntries as libc::c_int,
        uSQ,
    );
    run_plan(mtplan, verbose, thrmax);
    if verbose != 0 {
        fprintf(stderr, b"progress: 100.00%%\n\0" as *const u8 as *const libc::c_char);
    }
    free((*mtplan).mutex as *mut libc::c_void);
    free((*mtplan).monitor as *mut libc::c_void);
    let mut i: libc::c_int = 0 as libc::c_int;
    while i < (*mtplan).ntries {
        free(
            (*(*((*mtplan).tries).offset(i as isize)).jobs).node_pos as *mut libc::c_void,
        );
        free((*(*((*mtplan).tries).offset(i as isize)).jobs).lut as *mut libc::c_void);
        free((*(*((*mtplan).tries).offset(i as isize)).jobs).trie as *mut libc::c_void);
        free((*((*mtplan).tries).offset(i as isize)).jobs as *mut libc::c_void);
        i += 1;
        i;
    }
    free((*mtplan).tries as *mut libc::c_void);
    free(mtplan as *mut libc::c_void);
    unpad_useq(uSQ);
    let mut propt: propt_t = {
        let mut init = propt_t {
            first: [0 as libc::c_int as libc::c_char, 0, 0, 0, 0],
            pe_fastq: (PE_FASTQ as libc::c_int as libc::c_uint == FORMAT as libc::c_uint)
                as libc::c_int,
            showclusters: showclusters,
            showids: showids,
        };
        init
    };
    if CLUSTERALG as libc::c_uint == MP_CLUSTER as libc::c_int as libc::c_uint {
        if verbose != 0 {
            fprintf(
                stderr,
                b"message passing clustering\n\0" as *const u8 as *const libc::c_char,
            );
        }
        message_passing_clustering(uSQ);
        qsort(
            ((*uSQ).items).as_mut_ptr() as *mut libc::c_void,
            (*uSQ).nitems,
            ::core::mem::size_of::<*mut useq_t>() as libc::c_ulong,
            Some(
                canonical_order
                    as unsafe extern "C" fn(
                        *const libc::c_void,
                        *const libc::c_void,
                    ) -> libc::c_int,
            ),
        );
        if OUTPUTT as libc::c_uint == DEFAULT_OUTPUT as libc::c_int as libc::c_uint {
            let mut first: *mut useq_t = *((*uSQ).items)
                .as_mut_ptr()
                .offset(0 as libc::c_int as isize) as *mut useq_t;
            let mut canonical: *mut useq_t = (*first).canonical;
            if ((*first).canonical).is_null() {
                return 0 as libc::c_int;
            }
            head_default(first, propt);
            memcpy(
                (propt.first).as_mut_ptr() as *mut libc::c_void,
                b"\n\0" as *const u8 as *const libc::c_char as *const libc::c_void,
                1 as libc::c_int as libc::c_ulong,
            );
            let mut idstack: *mut idstack_t = 0 as *mut idstack_t;
            if showids != 0 {
                idstack = idstack_new(64 as libc::c_int as size_t);
                idstack_push((*first).seqid, (*first).nids as size_t, idstack);
            }
            let mut i_0: size_t = 1 as libc::c_int as size_t;
            while i_0 < (*uSQ).nitems {
                let mut u: *mut useq_t = *((*uSQ).items)
                    .as_mut_ptr()
                    .offset(i_0 as isize) as *mut useq_t;
                if ((*u).canonical).is_null() {
                    break;
                }
                if (*u).canonical != canonical {
                    if showids != 0 {
                        sort_and_print_ids(idstack);
                    }
                    canonical = (*u).canonical;
                    head_default(u, propt);
                    if showids != 0 {
                        (*idstack).pos = 0 as libc::c_int as size_t;
                    }
                } else {
                    members_mp_default(u, propt);
                }
                if showids != 0 {
                    idstack_push((*u).seqid, (*u).nids as size_t, idstack);
                }
                i_0 = i_0.wrapping_add(1);
                i_0;
            }
            if showids != 0 {
                sort_and_print_ids(idstack);
                idstack_free(idstack);
            }
            fprintf(OUTPUTF1, b"\n\0" as *const u8 as *const libc::c_char);
        }
        if OUTPUTT as libc::c_uint == TIDY_OUTPUT as libc::c_int as libc::c_uint {
            print_tidy(
                nseq,
                uSQ,
                (FORMAT as libc::c_uint == PE_FASTQ as libc::c_int as libc::c_uint)
                    as libc::c_int,
            );
        }
    } else if CLUSTERALG as libc::c_uint
        == SPHERES_CLUSTER as libc::c_int as libc::c_uint
    {
        if verbose != 0 {
            fprintf(
                stderr,
                b"spheres clustering\n\0" as *const u8 as *const libc::c_char,
            );
        }
        sphere_clustering(uSQ);
        qsort(
            ((*uSQ).items).as_mut_ptr() as *mut libc::c_void,
            (*uSQ).nitems,
            ::core::mem::size_of::<*mut useq_t>() as libc::c_ulong,
            Some(
                sphere_size_order
                    as unsafe extern "C" fn(
                        *const libc::c_void,
                        *const libc::c_void,
                    ) -> libc::c_int,
            ),
        );
        if OUTPUTT as libc::c_uint == DEFAULT_OUTPUT as libc::c_int as libc::c_uint {
            let mut idstack_0: *mut idstack_t = 0 as *mut idstack_t;
            if showids != 0 {
                idstack_0 = idstack_new(64 as libc::c_int as size_t);
            }
            let mut i_1: size_t = 0 as libc::c_int as size_t;
            while i_1 < (*uSQ).nitems {
                let mut u_0: *mut useq_t = *((*uSQ).items)
                    .as_mut_ptr()
                    .offset(i_1 as isize) as *mut useq_t;
                if (*u_0).canonical != u_0 {
                    break;
                }
                fprintf(
                    OUTPUTF1,
                    b"%s\t\0" as *const u8 as *const libc::c_char,
                    (*u_0).seq,
                );
                if showclusters != 0 {
                    fprintf(
                        OUTPUTF1,
                        b"%ld\t%s\0" as *const u8 as *const libc::c_char,
                        (*u_0).sphere_c,
                        (*u_0).seq,
                    );
                } else {
                    fprintf(
                        OUTPUTF1,
                        b"%ld\0" as *const u8 as *const libc::c_char,
                        (*u_0).sphere_c,
                    );
                }
                if showids != 0 {
                    (*idstack_0).pos = 0 as libc::c_int as size_t;
                    idstack_push((*u_0).seqid, (*u_0).nids as size_t, idstack_0);
                }
                if (showclusters != 0 || showids != 0) && !((*u_0).matches).is_null() {
                    let mut hits: *mut gstack_t = 0 as *mut gstack_t;
                    let mut j: libc::c_int = 0 as libc::c_int;
                    loop {
                        hits = *((*u_0).matches).offset(j as isize);
                        if !(hits != TOWER_TOP) {
                            break;
                        }
                        let mut k: size_t = 0 as libc::c_int as size_t;
                        while k < (*hits).nitems {
                            let mut match_0: *mut useq_t = *((*hits).items)
                                .as_mut_ptr()
                                .offset(k as isize) as *mut useq_t;
                            if !((*match_0).canonical != u_0) {
                                if showclusters != 0 {
                                    fprintf(
                                        OUTPUTF1,
                                        b",%s\0" as *const u8 as *const libc::c_char,
                                        (*match_0).seq,
                                    );
                                }
                                if showids != 0 {
                                    idstack_push(
                                        (*match_0).seqid,
                                        (*match_0).nids as size_t,
                                        idstack_0,
                                    );
                                }
                            }
                            k = k.wrapping_add(1);
                            k;
                        }
                        j += 1;
                        j;
                    }
                }
                if showids != 0 {
                    sort_and_print_ids(idstack_0);
                }
                fprintf(OUTPUTF1, b"\n\0" as *const u8 as *const libc::c_char);
                i_1 = i_1.wrapping_add(1);
                i_1;
            }
            if showids != 0 {
                idstack_free(idstack_0);
            }
        }
        if OUTPUTT as libc::c_uint == TIDY_OUTPUT as libc::c_int as libc::c_uint {
            print_tidy(
                nseq,
                uSQ,
                (FORMAT as libc::c_uint == PE_FASTQ as libc::c_int as libc::c_uint)
                    as libc::c_int,
            );
        }
    } else if CLUSTERALG as libc::c_uint
        == COMPONENTS_CLUSTER as libc::c_int as libc::c_uint
    {
        if verbose != 0 {
            fprintf(
                stderr,
                b"connected components clustering\n\0" as *const u8
                    as *const libc::c_char,
            );
        }
        let mut clusters: *mut gstack_t = compute_clusters(uSQ);
        if OUTPUTT as libc::c_uint == DEFAULT_OUTPUT as libc::c_int as libc::c_uint {
            let mut idstack_1: *mut idstack_t = 0 as *mut idstack_t;
            if showids != 0 {
                idstack_1 = idstack_new(64 as libc::c_int as size_t);
            }
            let mut i_2: size_t = 0 as libc::c_int as size_t;
            while i_2 < (*clusters).nitems {
                let mut cluster: *mut gstack_t = *((*clusters).items)
                    .as_mut_ptr()
                    .offset(i_2 as isize) as *mut gstack_t;
                let mut canonical_0: *mut useq_t = *((*cluster).items)
                    .as_mut_ptr()
                    .offset(0 as libc::c_int as isize) as *mut useq_t;
                fprintf(
                    OUTPUTF1,
                    b"%s\t%ld\0" as *const u8 as *const libc::c_char,
                    (*canonical_0).seq,
                    (*canonical_0).count,
                );
                if showclusters != 0 || showids != 0 {
                    fprintf(
                        OUTPUTF1,
                        b"\t%s\0" as *const u8 as *const libc::c_char,
                        (*canonical_0).seq,
                    );
                    if showids != 0 {
                        (*idstack_1).pos = 0 as libc::c_int as size_t;
                        idstack_push(
                            (*canonical_0).seqid,
                            (*canonical_0).nids as size_t,
                            idstack_1,
                        );
                    }
                    let mut k_0: size_t = 1 as libc::c_int as size_t;
                    while k_0 < (*cluster).nitems {
                        let mut u_1: *mut useq_t = *((*cluster).items)
                            .as_mut_ptr()
                            .offset(k_0 as isize) as *mut useq_t;
                        if showclusters != 0 {
                            fprintf(
                                OUTPUTF1,
                                b",%s\0" as *const u8 as *const libc::c_char,
                                (*u_1).seq,
                            );
                        }
                        if showids != 0 {
                            idstack_push((*u_1).seqid, (*u_1).nids as size_t, idstack_1);
                        }
                        k_0 = k_0.wrapping_add(1);
                        k_0;
                    }
                    if showids != 0 {
                        sort_and_print_ids(idstack_1);
                    }
                }
                fprintf(OUTPUTF1, b"\n\0" as *const u8 as *const libc::c_char);
                i_2 = i_2.wrapping_add(1);
                i_2;
            }
            if showids != 0 {
                idstack_free(idstack_1);
            }
        } else if OUTPUTT as libc::c_uint == NRED_OUTPUT as libc::c_int as libc::c_uint {
            (*uSQ).nitems = 0 as libc::c_int as size_t;
            let mut i_3: size_t = 0 as libc::c_int as size_t;
            while i_3 < (*clusters).nitems {
                push(
                    *((*(*((*clusters).items).as_mut_ptr().offset(i_3 as isize)
                        as *mut gstack_t))
                        .items)
                        .as_mut_ptr()
                        .offset(0 as libc::c_int as isize),
                    &mut uSQ,
                );
                i_3 = i_3.wrapping_add(1);
                i_3;
            }
        }
    }
    if OUTPUTT as libc::c_uint == NRED_OUTPUT as libc::c_int as libc::c_uint {
        if verbose != 0 {
            fprintf(
                stderr,
                b"non-redundant output\n\0" as *const u8 as *const libc::c_char,
            );
        }
        let mut print_nr: Option::<unsafe extern "C" fn(*mut useq_t) -> ()> = None;
        if FORMAT as libc::c_uint == FASTA as libc::c_int as libc::c_uint {
            print_nr = Some(print_nr_fasta as unsafe extern "C" fn(*mut useq_t) -> ());
        } else if FORMAT as libc::c_uint == FASTQ as libc::c_int as libc::c_uint {
            print_nr = Some(print_nr_fastq as unsafe extern "C" fn(*mut useq_t) -> ());
        } else if FORMAT as libc::c_uint == PE_FASTQ as libc::c_int as libc::c_uint {
            print_nr = Some(
                print_nr_pe_fastq as unsafe extern "C" fn(*mut useq_t) -> (),
            );
        } else {
            print_nr = Some(print_nr_raw as unsafe extern "C" fn(*mut useq_t) -> ());
        }
        let mut i_4: size_t = 0 as libc::c_int as size_t;
        while i_4 < (*uSQ).nitems {
            let mut u_2: *mut useq_t = *((*uSQ).items).as_mut_ptr().offset(i_4 as isize)
                as *mut useq_t;
            if ((*u_2).canonical).is_null() {
                break;
            }
            if !((*u_2).canonical != u_2) {
                print_nr.expect("non-null function pointer")(u_2);
            }
            i_4 = i_4.wrapping_add(1);
            i_4;
        }
    }
    free(uSQ as *mut libc::c_void);
    OUTPUTF1 = 0 as *mut FILE;
    OUTPUTF2 = 0 as *mut FILE;
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn run_plan(
    mut mtplan: *mut mtplan_t,
    verbose: libc::c_int,
    thrmax: libc::c_int,
) {
    let mut njobs: libc::c_int = (*mtplan).ntries * ((*mtplan).ntries + 1 as libc::c_int)
        / 2 as libc::c_int;
    let mut triedone: libc::c_int = 0 as libc::c_int;
    let mut idx: libc::c_int = -(1 as libc::c_int);
    while triedone < (*mtplan).ntries {
        idx = (idx + 1 as libc::c_int) % (*mtplan).ntries;
        let mut mttrie: *mut mttrie_t = ((*mtplan).tries).offset(idx as isize);
        pthread_mutex_lock((*mtplan).mutex);
        if (*mttrie).flag as libc::c_int == 0 as libc::c_int
            && ((*mtplan).active as libc::c_int) < thrmax
        {
            if (*mttrie).currentjob == (*mttrie).njobs {
                (*mttrie).flag = 2 as libc::c_int as libc::c_char;
                triedone += 1;
                triedone;
            } else {
                (*mttrie).flag = 1 as libc::c_int as libc::c_char;
                (*mtplan).active += 1;
                (*mtplan).active;
                let fresh3 = (*mttrie).currentjob;
                (*mttrie).currentjob = (*mttrie).currentjob + 1;
                let mut job: *mut mtjob_t = ((*mttrie).jobs).offset(fresh3 as isize);
                let mut thread: pthread_t = 0;
                if pthread_create(
                    &mut thread,
                    0 as *const pthread_attr_t,
                    Some(
                        do_query
                            as unsafe extern "C" fn(
                                *mut libc::c_void,
                            ) -> *mut libc::c_void,
                    ),
                    job as *mut libc::c_void,
                ) != 0
                {
                    fprintf(
                        stderr,
                        b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                            as *const libc::c_char,
                        strerror(*__errno_location()),
                        (*::core::mem::transmute::<
                            &[u8; 9],
                            &[libc::c_char; 9],
                        >(b"run_plan\0"))
                            .as_ptr(),
                        b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                        751 as libc::c_int,
                    );
                    krash();
                }
                pthread_detach(thread);
                if verbose != 0 {
                    fprintf(
                        stderr,
                        b"progress: %.2f%% \r\0" as *const u8 as *const libc::c_char,
                        (100 as libc::c_int as libc::c_float
                            * (*mtplan).jobsdone as libc::c_float
                            / njobs as libc::c_float) as libc::c_double,
                    );
                }
            }
        }
        while (*mtplan).active as libc::c_int == thrmax {
            pthread_cond_wait((*mtplan).monitor, (*mtplan).mutex);
        }
        pthread_mutex_unlock((*mtplan).mutex);
    }
}
#[no_mangle]
pub unsafe extern "C" fn do_query(mut args: *mut libc::c_void) -> *mut libc::c_void {
    let mut job: *mut mtjob_t = args as *mut mtjob_t;
    let mut useqS: *mut gstack_t = (*job).useqS;
    let mut trie: *mut trie_t = (*job).trie;
    let mut lut: *mut lookup_t = (*job).lut;
    let tau: libc::c_int = (*job).tau;
    let mut node_pos: *mut node_t = (*job).node_pos;
    let mut hits: *mut *mut gstack_t = new_tower(tau + 1 as libc::c_int);
    if hits.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 9], &[libc::c_char; 9]>(b"do_query\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            786 as libc::c_int,
        );
        krash();
    }
    let bidir_match: libc::c_int = (CLUSTERALG as libc::c_uint
        == SPHERES_CLUSTER as libc::c_int as libc::c_uint
        || CLUSTERALG as libc::c_uint
            == COMPONENTS_CLUSTER as libc::c_int as libc::c_uint) as libc::c_int;
    let mut last_query: *mut useq_t = 0 as *mut useq_t;
    let mut i: libc::c_int = (*job).start;
    while i <= (*job).end {
        let mut query: *mut useq_t = *((*useqS).items).as_mut_ptr().offset(i as isize)
            as *mut useq_t;
        let mut do_search: libc::c_int = (lut_search(lut, query) == 1 as libc::c_int)
            as libc::c_int;
        let mut data: *mut *mut libc::c_void = 0 as *mut *mut libc::c_void;
        if (*job).build != 0 {
            if lut_insert(lut, query) != 0 {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 9],
                        &[libc::c_char; 9],
                    >(b"do_query\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    807 as libc::c_int,
                );
                krash();
            }
            data = insert_string_wo_malloc(trie, (*query).seq, &mut node_pos);
            if data.is_null() || !(*data).is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 9],
                        &[libc::c_char; 9],
                    >(b"do_query\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    812 as libc::c_int,
                );
                krash();
            }
        }
        if do_search != 0 {
            let mut trail: libc::c_int = 0 as libc::c_int;
            if i < (*job).end {
                let mut next_query: *mut useq_t = *((*useqS).items)
                    .as_mut_ptr()
                    .offset((i + 1 as libc::c_int) as isize) as *mut useq_t;
                while *((*query).seq).offset(trail as isize) as libc::c_int
                    == *((*next_query).seq).offset(trail as isize) as libc::c_int
                {
                    trail += 1;
                    trail;
                }
            }
            let mut start: libc::c_int = 0 as libc::c_int;
            if !last_query.is_null() {
                while *((*query).seq).offset(start as isize) as libc::c_int
                    == *((*last_query).seq).offset(start as isize) as libc::c_int
                {
                    start += 1;
                    start;
                }
            }
            let mut j: libc::c_int = 0 as libc::c_int;
            while *hits.offset(j as isize) != TOWER_TOP {
                (**hits.offset(j as isize)).nitems = 0 as libc::c_int as size_t;
                j += 1;
                j;
            }
            let mut err: libc::c_int = search(
                trie,
                (*query).seq,
                tau,
                hits,
                start,
                trail,
            );
            if err != 0 {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 9],
                        &[libc::c_char; 9],
                    >(b"do_query\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    844 as libc::c_int,
                );
                krash();
            }
            let mut j_0: libc::c_int = 0 as libc::c_int;
            while *hits.offset(j_0 as isize) != TOWER_TOP {
                if (**hits.offset(j_0 as isize)).nitems
                    > (**hits.offset(j_0 as isize)).nslots
                {
                    fprintf(
                        stderr,
                        b"warning: incomplete search (%s)\n\0" as *const u8
                            as *const libc::c_char,
                        (*query).seq,
                    );
                    break;
                } else {
                    j_0 += 1;
                    j_0;
                }
            }
            let mut dist: libc::c_int = 1 as libc::c_int;
            while dist < tau + 1 as libc::c_int {
                let mut j_1: size_t = 0 as libc::c_int as size_t;
                while j_1 < (**hits.offset(dist as isize)).nitems {
                    let mut match_0: *mut useq_t = *((**hits.offset(dist as isize))
                        .items)
                        .as_mut_ptr()
                        .offset(j_1 as isize) as *mut useq_t;
                    if bidir_match != 0 {
                        pthread_mutex_lock(
                            ((*job).mutex).offset((*job).queryid as isize),
                        );
                        if addmatch(query, match_0, dist, tau) != 0 {
                            fprintf(
                                stderr,
                                b"Please contact guillaume.filion@gmail.com for support with this issue.\n\0"
                                    as *const u8 as *const libc::c_char,
                            );
                            abort();
                        }
                        pthread_mutex_unlock(
                            ((*job).mutex).offset((*job).queryid as isize),
                        );
                        pthread_mutex_lock(
                            ((*job).mutex).offset((*job).trieid as isize),
                        );
                        if addmatch(match_0, query, dist, tau) != 0 {
                            fprintf(
                                stderr,
                                b"Please contact guillaume.filion@gmail.com for support with this issue.\n\0"
                                    as *const u8 as *const libc::c_char,
                            );
                            abort();
                        }
                        pthread_mutex_unlock(
                            ((*job).mutex).offset((*job).trieid as isize),
                        );
                    } else {
                        let mut parent: *mut useq_t = if (*match_0).count
                            > (*query).count
                        {
                            match_0
                        } else {
                            query
                        };
                        let mut child: *mut useq_t = if (*match_0).count > (*query).count
                        {
                            query
                        } else {
                            match_0
                        };
                        let mut mincount: libc::c_int = (*child).count as libc::c_int;
                        let mut maxcount: libc::c_int = (*parent).count as libc::c_int;
                        if !((maxcount as libc::c_double)
                            < CLUSTER_RATIO * mincount as libc::c_double)
                        {
                            if maxcount == mincount {
                                if strcmp((*parent).seq, (*child).seq) > 0 as libc::c_int {
                                    let mut t: *mut useq_t = parent;
                                    parent = child;
                                    child = t;
                                }
                            }
                            let mut mutexid: libc::c_int = if parent == query {
                                (*job).trieid
                            } else {
                                (*job).queryid
                            };
                            pthread_mutex_lock(((*job).mutex).offset(mutexid as isize));
                            if addmatch(child, parent, dist, tau) != 0 {
                                fprintf(
                                    stderr,
                                    b"Please contact guillaume.filion@gmail.com for support with this issue.\n\0"
                                        as *const u8 as *const libc::c_char,
                                );
                                abort();
                            }
                            pthread_mutex_unlock(
                                ((*job).mutex).offset(mutexid as isize),
                            );
                        }
                    }
                    j_1 = j_1.wrapping_add(1);
                    j_1;
                }
                dist += 1;
                dist;
            }
            last_query = query;
        }
        if (*job).build != 0 {
            *data = query as *mut libc::c_void;
        }
        i += 1;
        i;
    }
    destroy_tower(hits);
    pthread_mutex_lock((*job).mutex);
    *(*job).active = (*(*job).active as libc::c_int - 1 as libc::c_int) as libc::c_char;
    *(*job).jobsdone += 1 as libc::c_int;
    *(*job).trieflag = 0 as libc::c_int as libc::c_char;
    pthread_cond_signal((*job).monitor);
    pthread_mutex_unlock((*job).mutex);
    return 0 as *mut libc::c_void;
}
#[no_mangle]
pub unsafe extern "C" fn plan_mt(
    mut tau: libc::c_int,
    mut height: libc::c_int,
    mut medianlen: libc::c_int,
    mut ntries: libc::c_int,
    mut useqS: *mut gstack_t,
) -> *mut mtplan_t {
    if ntries < 1 as libc::c_int {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 8], &[libc::c_char; 8]>(b"plan_mt\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            967 as libc::c_int,
        );
        krash();
    }
    let mut mtplan: *mut mtplan_t = malloc(
        ::core::mem::size_of::<mtplan_t>() as libc::c_ulong,
    ) as *mut mtplan_t;
    if mtplan.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 8], &[libc::c_char; 8]>(b"plan_mt\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            974 as libc::c_int,
        );
        krash();
    }
    let mut mutex: *mut pthread_mutex_t = calloc(
        (ntries + 1 as libc::c_int) as libc::c_ulong,
        ::core::mem::size_of::<pthread_mutex_t>() as libc::c_ulong,
    ) as *mut pthread_mutex_t;
    let mut monitor: *mut pthread_cond_t = malloc(
        ::core::mem::size_of::<pthread_cond_t>() as libc::c_ulong,
    ) as *mut pthread_cond_t;
    if mutex.is_null() || monitor.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 8], &[libc::c_char; 8]>(b"plan_mt\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            982 as libc::c_int,
        );
        krash();
    }
    let mut i: libc::c_int = 0 as libc::c_int;
    while i < ntries + 1 as libc::c_int {
        pthread_mutex_init(mutex.offset(i as isize), 0 as *const pthread_mutexattr_t);
        i += 1;
        i;
    }
    pthread_cond_init(monitor, 0 as *const pthread_condattr_t);
    let mut mttries: *mut mttrie_t = calloc(
        ntries as libc::c_ulong,
        ::core::mem::size_of::<mttrie_t>() as libc::c_ulong,
    ) as *mut mttrie_t;
    if mttries.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 8], &[libc::c_char; 8]>(b"plan_mt\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            992 as libc::c_int,
        );
        krash();
    }
    let mut Q: libc::c_int = ((*useqS).nitems).wrapping_div(ntries as libc::c_ulong)
        as libc::c_int;
    let mut R: libc::c_int = ((*useqS).nitems).wrapping_rem(ntries as libc::c_ulong)
        as libc::c_int;
    let mut bounds: *mut libc::c_int = calloc(
        (ntries + 1 as libc::c_int) as libc::c_ulong,
        ::core::mem::size_of::<libc::c_int>() as libc::c_ulong,
    ) as *mut libc::c_int;
    let mut i_0: libc::c_int = 0 as libc::c_int;
    while i_0 < ntries + 1 as libc::c_int {
        *bounds.offset(i_0 as isize) = Q * i_0 + (if i_0 < R { i_0 } else { R });
        i_0 += 1;
        i_0;
    }
    let mut nnodes: *mut libc::c_long = calloc(
        ntries as libc::c_ulong,
        ::core::mem::size_of::<libc::c_long>() as libc::c_ulong,
    ) as *mut libc::c_long;
    let mut i_1: libc::c_int = 0 as libc::c_int;
    while i_1 < ntries {
        *nnodes
            .offset(
                i_1 as isize,
            ) = count_trie_nodes(
            ((*useqS).items).as_mut_ptr() as *mut *mut useq_t,
            *bounds.offset(i_1 as isize),
            *bounds.offset((i_1 + 1 as libc::c_int) as isize),
        );
        i_1 += 1;
        i_1;
    }
    let mut i_2: libc::c_int = 0 as libc::c_int;
    while i_2 < ntries {
        let mut njobs: libc::c_int = (ntries + 1 as libc::c_int) / 2 as libc::c_int;
        let mut local_trie: *mut trie_t = new_trie(height as libc::c_uint);
        let mut local_nodes: *mut node_t = calloc(
            *nnodes.offset(i_2 as isize) as libc::c_ulong,
            ::core::mem::size_of::<node_t>() as libc::c_ulong,
        ) as *mut node_t;
        let mut jobs: *mut mtjob_t = calloc(
            njobs as libc::c_ulong,
            ::core::mem::size_of::<mtjob_t>() as libc::c_ulong,
        ) as *mut mtjob_t;
        if local_trie.is_null() || jobs.is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<&[u8; 8], &[libc::c_char; 8]>(b"plan_mt\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                1018 as libc::c_int,
            );
            krash();
        }
        let mut local_lut: *mut lookup_t = new_lookup(medianlen, height, tau);
        if local_lut.is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<&[u8; 8], &[libc::c_char; 8]>(b"plan_mt\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                1027 as libc::c_int,
            );
            krash();
        }
        (*mttries.offset(i_2 as isize)).flag = 0 as libc::c_int as libc::c_char;
        (*mttries.offset(i_2 as isize)).currentjob = 0 as libc::c_int;
        (*mttries.offset(i_2 as isize)).njobs = njobs;
        let ref mut fresh4 = (*mttries.offset(i_2 as isize)).jobs;
        *fresh4 = jobs;
        let mut j: libc::c_int = 0 as libc::c_int;
        while j < njobs {
            let mut idx: libc::c_int = (i_2 + j) % ntries;
            let mut only_if_first_job: libc::c_int = (j == 0 as libc::c_int)
                as libc::c_int;
            (*jobs.offset(j as isize)).start = *bounds.offset(idx as isize);
            (*jobs.offset(j as isize))
                .end = *bounds.offset((idx + 1 as libc::c_int) as isize)
                - 1 as libc::c_int;
            (*jobs.offset(j as isize)).tau = tau;
            (*jobs.offset(j as isize)).build = only_if_first_job;
            let ref mut fresh5 = (*jobs.offset(j as isize)).useqS;
            *fresh5 = useqS;
            let ref mut fresh6 = (*jobs.offset(j as isize)).trie;
            *fresh6 = local_trie;
            let ref mut fresh7 = (*jobs.offset(j as isize)).node_pos;
            *fresh7 = local_nodes;
            let ref mut fresh8 = (*jobs.offset(j as isize)).lut;
            *fresh8 = local_lut;
            let ref mut fresh9 = (*jobs.offset(j as isize)).mutex;
            *fresh9 = mutex;
            let ref mut fresh10 = (*jobs.offset(j as isize)).monitor;
            *fresh10 = monitor;
            let ref mut fresh11 = (*jobs.offset(j as isize)).jobsdone;
            *fresh11 = &mut (*mtplan).jobsdone;
            let ref mut fresh12 = (*jobs.offset(j as isize)).trieflag;
            *fresh12 = &mut (*mttries.offset(i_2 as isize)).flag;
            let ref mut fresh13 = (*jobs.offset(j as isize)).active;
            *fresh13 = &mut (*mtplan).active;
            (*jobs.offset(j as isize)).queryid = idx + 1 as libc::c_int;
            (*jobs.offset(j as isize)).trieid = i_2 + 1 as libc::c_int;
            j += 1;
            j;
        }
        i_2 += 1;
        i_2;
    }
    free(bounds as *mut libc::c_void);
    free(nnodes as *mut libc::c_void);
    (*mtplan).active = 0 as libc::c_int as libc::c_char;
    (*mtplan).ntries = ntries;
    (*mtplan).jobsdone = 0 as libc::c_int;
    (*mtplan).mutex = mutex;
    (*mtplan).monitor = monitor;
    (*mtplan).tries = mttries;
    return mtplan;
}
#[no_mangle]
pub unsafe extern "C" fn count_trie_nodes(
    mut seqs: *mut *mut useq_t,
    mut start: libc::c_int,
    mut end: libc::c_int,
) -> libc::c_long {
    let mut seqlen: libc::c_int = (strlen((**seqs.offset(start as isize)).seq))
        .wrapping_sub(1 as libc::c_int as libc::c_ulong) as libc::c_int;
    let mut count: libc::c_long = seqlen as libc::c_long;
    let mut i: libc::c_int = start + 1 as libc::c_int;
    while i < end {
        let mut a: *mut libc::c_char = (**seqs.offset((i - 1 as libc::c_int) as isize))
            .seq;
        let mut b: *mut libc::c_char = (**seqs.offset(i as isize)).seq;
        let mut prefix: libc::c_int = 0 as libc::c_int;
        while *a.offset(prefix as isize) as libc::c_int
            == *b.offset(prefix as isize) as libc::c_int
        {
            prefix += 1;
            prefix;
        }
        count += (seqlen - prefix) as libc::c_long;
        i += 1;
        i;
    }
    return count;
}
#[no_mangle]
pub unsafe extern "C" fn connected_components(
    mut useq: *mut useq_t,
    mut cluster: *mut *mut gstack_t,
) {
    (*useq).canonical = useq;
    push(useq as *mut libc::c_void, cluster);
    if ((*useq).matches).is_null() {
        return;
    }
    let mut matches: *mut gstack_t = 0 as *mut gstack_t;
    let mut j: libc::c_int = 0 as libc::c_int;
    loop {
        matches = *((*useq).matches).offset(j as isize);
        if !(matches != TOWER_TOP) {
            break;
        }
        let mut k: size_t = 0 as libc::c_int as size_t;
        while k < (*matches).nitems {
            let mut match_0: *mut useq_t = *((*matches).items)
                .as_mut_ptr()
                .offset(k as isize) as *mut useq_t;
            if ((*match_0).canonical).is_null() {
                connected_components(match_0, cluster);
            }
            k = k.wrapping_add(1);
            k;
        }
        j += 1;
        j;
    };
}
#[no_mangle]
pub unsafe extern "C" fn compute_clusters(mut uSQ: *mut gstack_t) -> *mut gstack_t {
    let mut clusters: *mut gstack_t = new_gstack();
    let mut i: size_t = 0 as libc::c_int as size_t;
    while i < (*uSQ).nitems {
        let mut useq: *mut useq_t = *((*uSQ).items).as_mut_ptr().offset(i as isize)
            as *mut useq_t;
        if ((*useq).canonical).is_null() {
            let mut cluster: *mut gstack_t = new_gstack();
            connected_components(useq, &mut cluster);
            let mut edge_count: libc::c_int = 0 as libc::c_int;
            if !((*useq).matches).is_null() {
                let mut matches: *mut gstack_t = 0 as *mut gstack_t;
                let mut j: libc::c_int = 0 as libc::c_int;
                loop {
                    matches = *((*useq).matches).offset(j as isize);
                    if !(matches != TOWER_TOP) {
                        break;
                    }
                    edge_count = (edge_count as libc::c_ulong)
                        .wrapping_add((*matches).nitems) as libc::c_int as libc::c_int;
                    j += 1;
                    j;
                }
            }
            let mut cluster_count_0: size_t = (*useq).count as size_t;
            let mut k: size_t = 1 as libc::c_int as size_t;
            while k < (*cluster).nitems {
                let mut s: *mut useq_t = *((*cluster).items)
                    .as_mut_ptr()
                    .offset(k as isize) as *mut useq_t;
                cluster_count_0 = (cluster_count_0 as libc::c_ulong)
                    .wrapping_add((*s).count as libc::c_ulong) as size_t as size_t;
                if (*s).count > (*useq).count {
                    let mut cnt: libc::c_int = 0 as libc::c_int;
                    let mut matches_0: *mut gstack_t = 0 as *mut gstack_t;
                    let mut j_0: libc::c_int = 0 as libc::c_int;
                    loop {
                        matches_0 = *((*s).matches).offset(j_0 as isize);
                        if !(matches_0 != TOWER_TOP) {
                            break;
                        }
                        cnt = (cnt as libc::c_ulong).wrapping_add((*matches_0).nitems)
                            as libc::c_int as libc::c_int;
                        j_0 += 1;
                        j_0;
                    }
                    let ref mut fresh14 = *((*cluster).items)
                        .as_mut_ptr()
                        .offset(0 as libc::c_int as isize);
                    *fresh14 = s as *mut libc::c_void;
                    let ref mut fresh15 = *((*cluster).items)
                        .as_mut_ptr()
                        .offset(k as isize);
                    *fresh15 = useq as *mut libc::c_void;
                    useq = s;
                    edge_count = cnt;
                } else if (*s).count == (*useq).count && !((*s).matches).is_null() {
                    let mut cnt_0: libc::c_int = 0 as libc::c_int;
                    let mut matches_1: *mut gstack_t = 0 as *mut gstack_t;
                    let mut j_1: libc::c_int = 0 as libc::c_int;
                    loop {
                        matches_1 = *((*s).matches).offset(j_1 as isize);
                        if !(matches_1 != TOWER_TOP) {
                            break;
                        }
                        cnt_0 = (cnt_0 as libc::c_ulong)
                            .wrapping_add((*matches_1).nitems) as libc::c_int
                            as libc::c_int;
                        j_1 += 1;
                        j_1;
                    }
                    if cnt_0 > edge_count {
                        let ref mut fresh16 = *((*cluster).items)
                            .as_mut_ptr()
                            .offset(0 as libc::c_int as isize);
                        *fresh16 = s as *mut libc::c_void;
                        let ref mut fresh17 = *((*cluster).items)
                            .as_mut_ptr()
                            .offset(k as isize);
                        *fresh17 = useq as *mut libc::c_void;
                        useq = s;
                        edge_count = cnt_0;
                    }
                }
                k = k.wrapping_add(1);
                k;
            }
            (*useq).count = cluster_count_0 as ssize_t;
            push(cluster as *mut libc::c_void, &mut clusters);
        }
        i = i.wrapping_add(1);
        i;
    }
    qsort(
        ((*clusters).items).as_mut_ptr() as *mut libc::c_void,
        (*clusters).nitems,
        ::core::mem::size_of::<*mut gstack_t>() as libc::c_ulong,
        Some(
            cluster_count
                as unsafe extern "C" fn(
                    *const libc::c_void,
                    *const libc::c_void,
                ) -> libc::c_int,
        ),
    );
    return clusters;
}
#[no_mangle]
pub unsafe extern "C" fn sphere_clustering(mut useqS: *mut gstack_t) {
    qsort(
        ((*useqS).items).as_mut_ptr() as *mut libc::c_void,
        (*useqS).nitems,
        ::core::mem::size_of::<*mut useq_t>() as libc::c_ulong,
        Some(
            count_order_spheres
                as unsafe extern "C" fn(
                    *const libc::c_void,
                    *const libc::c_void,
                ) -> libc::c_int,
        ),
    );
    let mut i: size_t = 0 as libc::c_int as size_t;
    while i < (*useqS).nitems {
        let mut useq: *mut useq_t = *((*useqS).items).as_mut_ptr().offset(i as isize)
            as *mut useq_t;
        if ((*useq).canonical).is_null() {
            (*useq).canonical = useq;
            (*useq).sphere_c = (*useq).count;
            (*useq).sphere_d = 0 as libc::c_int as ssize_t;
            if !((*useq).matches).is_null() {
                let mut matches: *mut gstack_t = 0 as *mut gstack_t;
                let mut j: libc::c_int = 0 as libc::c_int;
                loop {
                    matches = *((*useq).matches).offset(j as isize);
                    if !(matches != TOWER_TOP) {
                        break;
                    }
                    let mut current_block_9: u64;
                    let mut k: size_t = 0 as libc::c_int as size_t;
                    while k < (*matches).nitems {
                        let mut match_0: *mut useq_t = *((*matches).items)
                            .as_mut_ptr()
                            .offset(k as isize) as *mut useq_t;
                        if !((*match_0).canonical).is_null() {
                            if (j as libc::c_long) < (*match_0).sphere_d {
                                (*(*match_0).canonical).sphere_c -= (*match_0).count;
                                current_block_9 = 7976072742316086414;
                            } else {
                                (*matches).nitems = ((*matches).nitems).wrapping_sub(1);
                                let fresh18 = k;
                                k = k.wrapping_sub(1);
                                let ref mut fresh19 = *((*matches).items)
                                    .as_mut_ptr()
                                    .offset(fresh18 as isize);
                                *fresh19 = *((*matches).items)
                                    .as_mut_ptr()
                                    .offset((*matches).nitems as isize);
                                current_block_9 = 5720623009719927633;
                            }
                        } else {
                            current_block_9 = 7976072742316086414;
                        }
                        match current_block_9 {
                            7976072742316086414 => {
                                (*useq).sphere_c += (*match_0).count;
                                (*match_0).canonical = useq;
                                (*match_0).sphere_d = j as ssize_t;
                            }
                            _ => {}
                        }
                        k = k.wrapping_add(1);
                        k;
                    }
                    j += 1;
                    j;
                }
            }
        }
        i = i.wrapping_add(1);
        i;
    }
}
#[no_mangle]
pub unsafe extern "C" fn message_passing_clustering(mut useqS: *mut gstack_t) {
    let mut i: size_t = 0 as libc::c_int as size_t;
    while i < (*useqS).nitems {
        let mut u: *mut useq_t = *((*useqS).items).as_mut_ptr().offset(i as isize)
            as *mut useq_t;
        transfer_counts_and_update_canonicals(u);
        i = i.wrapping_add(1);
        i;
    }
    let mut i_0: size_t = 0 as libc::c_int as size_t;
    while i_0 < (*useqS).nitems {
        let mut u_0: *mut useq_t = *((*useqS).items).as_mut_ptr().offset(i_0 as isize)
            as *mut useq_t;
        mp_resolve_ambiguous(u_0);
        i_0 = i_0.wrapping_add(1);
        i_0;
    }
}
#[no_mangle]
pub unsafe extern "C" fn seqsort(
    mut data: *mut *mut useq_t,
    mut numels: size_t,
    mut thrmax: libc::c_int,
) -> size_t {
    let mut buffer: *mut *mut useq_t = calloc(
        numels,
        ::core::mem::size_of::<*mut useq_t>() as libc::c_ulong,
    ) as *mut *mut useq_t;
    memcpy(
        buffer as *mut libc::c_void,
        data as *const libc::c_void,
        numels.wrapping_mul(::core::mem::size_of::<*mut useq_t>() as libc::c_ulong),
    );
    let mut args: sortargs_t = sortargs_t {
        buf0: 0 as *mut *mut useq_t,
        buf1: 0 as *mut *mut useq_t,
        size: 0,
        b: 0,
        thread: 0,
        repeats: 0,
    };
    args.buf0 = data;
    args.buf1 = buffer;
    args.size = numels as ssize_t;
    args.b = 0 as libc::c_int as int64_t;
    args.thread = 0 as libc::c_int;
    args.repeats = 0 as libc::c_int as ssize_t;
    while thrmax >> args.thread + 1 as libc::c_int > 0 as libc::c_int {
        args.thread += 1;
        args.thread;
    }
    nukesort(&mut args as *mut sortargs_t as *mut libc::c_void);
    free(buffer as *mut libc::c_void);
    return numels.wrapping_sub(args.repeats as libc::c_ulong);
}
#[no_mangle]
pub unsafe extern "C" fn nukesort(mut args: *mut libc::c_void) -> *mut libc::c_void {
    let mut sortargs: *mut sortargs_t = args as *mut sortargs_t;
    if (*sortargs).size < 2 as libc::c_int as libc::c_long {
        return 0 as *mut libc::c_void;
    }
    let mut arg1: sortargs_t = *sortargs;
    let mut arg2: sortargs_t = *sortargs;
    arg1.size /= 2 as libc::c_int as libc::c_long;
    arg2.size = arg1.size + arg2.size % 2 as libc::c_int as libc::c_long;
    arg2.buf0 = (arg2.buf0).offset(arg1.size as isize);
    arg2.buf1 = (arg2.buf1).offset(arg1.size as isize);
    arg2
        .b = (arg1.b + 1 as libc::c_int as libc::c_long)
        % 2 as libc::c_int as libc::c_long;
    arg1.b = arg2.b;
    if arg1.thread != 0 {
        arg2.thread = arg1.thread - 1 as libc::c_int;
        arg1.thread = arg2.thread;
        let mut thread1: pthread_t = 0;
        let mut thread2: pthread_t = 0;
        if pthread_create(
            &mut thread1,
            0 as *const pthread_attr_t,
            Some(
                nukesort as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
            ),
            &mut arg1 as *mut sortargs_t as *mut libc::c_void,
        ) != 0
            || pthread_create(
                &mut thread2,
                0 as *const pthread_attr_t,
                Some(
                    nukesort
                        as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void,
                ),
                &mut arg2 as *mut sortargs_t as *mut libc::c_void,
            ) != 0
        {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<&[u8; 9], &[libc::c_char; 9]>(b"nukesort\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                1331 as libc::c_int,
            );
            krash();
        }
        pthread_join(thread1, 0 as *mut *mut libc::c_void);
        pthread_join(thread2, 0 as *mut *mut libc::c_void);
    } else {
        nukesort(&mut arg1 as *mut sortargs_t as *mut libc::c_void);
        nukesort(&mut arg2 as *mut sortargs_t as *mut libc::c_void);
    }
    let mut l: *mut *mut useq_t = if (*sortargs).b != 0 { arg1.buf0 } else { arg1.buf1 };
    let mut r: *mut *mut useq_t = if (*sortargs).b != 0 { arg2.buf0 } else { arg2.buf1 };
    let mut buf: *mut *mut useq_t = if (*sortargs).b != 0 {
        arg1.buf1
    } else {
        arg1.buf0
    };
    let mut i: ssize_t = 0 as libc::c_int as ssize_t;
    let mut j: ssize_t = 0 as libc::c_int as ssize_t;
    let mut idx: ssize_t = 0 as libc::c_int as ssize_t;
    let mut repeats: ssize_t = 0 as libc::c_int as ssize_t;
    let mut cmp: libc::c_int = 0 as libc::c_int;
    while i + j < (*sortargs).size {
        if j == arg2.size || (*r.offset(j as isize)).is_null() {
            memcpy(
                buf.offset(idx as isize) as *mut libc::c_void,
                l.offset(i as isize) as *const libc::c_void,
                ((arg1.size - i) as libc::c_ulong)
                    .wrapping_mul(::core::mem::size_of::<*mut useq_t>() as libc::c_ulong),
            );
            break;
        } else if i == arg1.size || (*l.offset(i as isize)).is_null() {
            memcpy(
                buf.offset(idx as isize) as *mut libc::c_void,
                r.offset(j as isize) as *const libc::c_void,
                ((arg2.size - j) as libc::c_ulong)
                    .wrapping_mul(::core::mem::size_of::<*mut useq_t>() as libc::c_ulong),
            );
            break;
        } else {
            if (*l.offset(i as isize)).is_null() && (*r.offset(j as isize)).is_null() {
                break;
            }
            let mut ul: *mut useq_t = *l.offset(i as isize);
            let mut ur: *mut useq_t = *r.offset(j as isize);
            let mut sl: ssize_t = strlen((*ul).seq) as ssize_t;
            let mut sr: ssize_t = strlen((*ur).seq) as ssize_t;
            if sl == sr {
                cmp = strcmp((*ul).seq, (*ur).seq);
            } else {
                cmp = if sl < sr { -(1 as libc::c_int) } else { 1 as libc::c_int };
            }
            if cmp == 0 as libc::c_int {
                (*ul).count += (*ur).count;
                transfer_useq_ids(ul, ur);
                destroy_useq(ur);
                let fresh20 = i;
                i = i + 1;
                let fresh21 = idx;
                idx = idx + 1;
                let ref mut fresh22 = *buf.offset(fresh21 as isize);
                *fresh22 = *l.offset(fresh20 as isize);
                j += 1;
                j;
                repeats += 1;
                repeats;
            } else if cmp < 0 as libc::c_int {
                let fresh23 = i;
                i = i + 1;
                let fresh24 = idx;
                idx = idx + 1;
                let ref mut fresh25 = *buf.offset(fresh24 as isize);
                *fresh25 = *l.offset(fresh23 as isize);
            } else {
                let fresh26 = j;
                j = j + 1;
                let fresh27 = idx;
                idx = idx + 1;
                let ref mut fresh28 = *buf.offset(fresh27 as isize);
                *fresh28 = *r.offset(fresh26 as isize);
            }
        }
    }
    (*sortargs).repeats = repeats + arg1.repeats + arg2.repeats;
    let mut offset: ssize_t = (*sortargs).size - (*sortargs).repeats;
    memset(
        buf.offset(offset as isize) as *mut libc::c_void,
        0 as libc::c_int,
        ((*sortargs).repeats as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<*mut useq_t>() as libc::c_ulong),
    );
    return 0 as *mut libc::c_void;
}
#[no_mangle]
pub unsafe extern "C" fn read_rawseq(
    mut inputf: *mut FILE,
    mut uSQ: *mut gstack_t,
) -> *mut gstack_t {
    let mut nread: ssize_t = 0;
    let mut nchar: size_t = 1024 as libc::c_int as size_t;
    let mut copy: [libc::c_char; 1023] = [0; 1023];
    let mut line: *mut libc::c_char = malloc(1024 as libc::c_int as libc::c_ulong)
        as *mut libc::c_char;
    if line.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 12], &[libc::c_char; 12]>(b"read_rawseq\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1411 as libc::c_int,
        );
        krash();
    }
    let mut seq: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut count: libc::c_int = 0 as libc::c_int;
    let mut lineno: libc::c_int = 0 as libc::c_int;
    loop {
        nread = getline(&mut line, &mut nchar, inputf);
        if !(nread != -(1 as libc::c_int) as libc::c_long) {
            break;
        }
        if nread > 1023 as libc::c_int as libc::c_long {
            fprintf(
                stderr,
                b"max sequence length exceeded (%d)\n\0" as *const u8
                    as *const libc::c_char,
                1023 as libc::c_int,
            );
            fprintf(
                stderr,
                b"offending line:\n%s\n\0" as *const u8 as *const libc::c_char,
                line,
            );
            abort();
        }
        lineno += 1;
        lineno;
        if *line.offset((nread - 1 as libc::c_int as libc::c_long) as isize)
            as libc::c_int == '\n' as i32
        {
            *line
                .offset(
                    (nread - 1 as libc::c_int as libc::c_long) as isize,
                ) = '\0' as i32 as libc::c_char;
        }
        if sscanf(
            line,
            b"%s\t%d\0" as *const u8 as *const libc::c_char,
            copy.as_mut_ptr(),
            &mut count as *mut libc::c_int,
        ) != 2 as libc::c_int
        {
            count = 1 as libc::c_int;
            seq = line;
        } else {
            seq = copy.as_mut_ptr();
        }
        let mut seqlen: size_t = strlen(seq);
        let mut i: size_t = 0 as libc::c_int as size_t;
        while i < seqlen {
            if valid_DNA_char[*seq.offset(i as isize) as libc::c_int as usize] == 0 {
                fprintf(
                    stderr,
                    b"invalid input\n\0" as *const u8 as *const libc::c_char,
                );
                fprintf(
                    stderr,
                    b"offending sequence:\n%s\n\0" as *const u8 as *const libc::c_char,
                    seq,
                );
                abort();
            }
            i = i.wrapping_add(1);
            i;
        }
        let mut new: *mut useq_t = new_useq(count, seq, 0 as *mut libc::c_char);
        if new.is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<
                    &[u8; 12],
                    &[libc::c_char; 12],
                >(b"read_rawseq\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                1445 as libc::c_int,
            );
            krash();
        }
        (*new).nids = 1 as libc::c_int as libc::c_uint;
        (*new)
            .seqid = malloc(::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
            as *mut libc::c_int;
        if ((*new).seqid).is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<
                    &[u8; 12],
                    &[libc::c_char; 12],
                >(b"read_rawseq\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                1451 as libc::c_int,
            );
            krash();
        }
        *((*new).seqid)
            .offset(
                0 as libc::c_int as isize,
            ) = ((*uSQ).nitems).wrapping_add(1 as libc::c_int as libc::c_ulong)
            as libc::c_int;
        push(new as *mut libc::c_void, &mut uSQ);
    }
    free(line as *mut libc::c_void);
    return uSQ;
}
#[no_mangle]
pub unsafe extern "C" fn read_fasta(
    mut inputf: *mut FILE,
    mut uSQ: *mut gstack_t,
) -> *mut gstack_t {
    let mut nread: ssize_t = 0;
    let mut nchar: size_t = 1024 as libc::c_int as size_t;
    let mut line: *mut libc::c_char = malloc(1024 as libc::c_int as libc::c_ulong)
        as *mut libc::c_char;
    if line.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 11], &[libc::c_char; 11]>(b"read_fasta\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1468 as libc::c_int,
        );
        krash();
    }
    let mut header: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut lineno: libc::c_int = 0 as libc::c_int;
    let readh: libc::c_int = (OUTPUTT as libc::c_uint
        == NRED_OUTPUT as libc::c_int as libc::c_uint) as libc::c_int;
    loop {
        nread = getline(&mut line, &mut nchar, inputf);
        if !(nread != -(1 as libc::c_int) as libc::c_long) {
            break;
        }
        lineno += 1;
        lineno;
        if *line.offset((nread - 1 as libc::c_int as libc::c_long) as isize)
            as libc::c_int == '\n' as i32
        {
            *line
                .offset(
                    (nread - 1 as libc::c_int as libc::c_long) as isize,
                ) = '\0' as i32 as libc::c_char;
        }
        if lineno % 2 as libc::c_int == 0 as libc::c_int {
            let mut seqlen: size_t = strlen(line);
            if seqlen > 1023 as libc::c_int as libc::c_ulong {
                fprintf(
                    stderr,
                    b"max sequence length exceeded (%d)\n\0" as *const u8
                        as *const libc::c_char,
                    1023 as libc::c_int,
                );
                fprintf(
                    stderr,
                    b"offending sequence:\n%s\n\0" as *const u8 as *const libc::c_char,
                    line,
                );
                abort();
            }
            let mut i: size_t = 0 as libc::c_int as size_t;
            while i < seqlen {
                if valid_DNA_char[*line.offset(i as isize) as libc::c_int as usize] == 0
                {
                    fprintf(
                        stderr,
                        b"invalid input\n\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(
                        stderr,
                        b"offending sequence:\n%s\n\0" as *const u8
                            as *const libc::c_char,
                        line,
                    );
                    abort();
                }
                i = i.wrapping_add(1);
                i;
            }
            let mut new: *mut useq_t = new_useq(1 as libc::c_int, line, header);
            if new.is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 11],
                        &[libc::c_char; 11],
                    >(b"read_fasta\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1498 as libc::c_int,
                );
                krash();
            }
            if !header.is_null() {
                free(header as *mut libc::c_void);
                header = 0 as *mut libc::c_char;
            }
            (*new).nids = 1 as libc::c_int as libc::c_uint;
            (*new)
                .seqid = malloc(::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                as *mut libc::c_int;
            if ((*new).seqid).is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 11],
                        &[libc::c_char; 11],
                    >(b"read_fasta\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1508 as libc::c_int,
                );
                krash();
            }
            *((*new).seqid)
                .offset(
                    0 as libc::c_int as isize,
                ) = ((*uSQ).nitems).wrapping_add(1 as libc::c_int as libc::c_ulong)
                as libc::c_int;
            push(new as *mut libc::c_void, &mut uSQ);
        } else if readh != 0 {
            header = strdup(line);
            if header.is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 11],
                        &[libc::c_char; 11],
                    >(b"read_fasta\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1516 as libc::c_int,
                );
                krash();
            }
        }
    }
    if !header.is_null() {
        free(header as *mut libc::c_void);
    }
    free(line as *mut libc::c_void);
    return uSQ;
}
#[no_mangle]
pub unsafe extern "C" fn read_fastq(
    mut inputf: *mut FILE,
    mut uSQ: *mut gstack_t,
) -> *mut gstack_t {
    let mut nread: ssize_t = 0;
    let mut nchar: size_t = 1024 as libc::c_int as size_t;
    let mut line: *mut libc::c_char = malloc(1024 as libc::c_int as libc::c_ulong)
        as *mut libc::c_char;
    if line.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 11], &[libc::c_char; 11]>(b"read_fastq\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1534 as libc::c_int,
        );
        krash();
    }
    let mut seq: [libc::c_char; 1025] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut header: [libc::c_char; 1025] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut info: [libc::c_char; 2050] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut lineno: size_t = 0 as libc::c_int as size_t;
    let readh: libc::c_int = (OUTPUTT as libc::c_uint
        == NRED_OUTPUT as libc::c_int as libc::c_uint) as libc::c_int;
    loop {
        nread = getline(&mut line, &mut nchar, inputf);
        if !(nread != -(1 as libc::c_int) as libc::c_long) {
            break;
        }
        lineno = lineno.wrapping_add(1);
        lineno;
        if *line.offset((nread - 1 as libc::c_int as libc::c_long) as isize)
            as libc::c_int == '\n' as i32
        {
            *line
                .offset(
                    (nread - 1 as libc::c_int as libc::c_long) as isize,
                ) = '\0' as i32 as libc::c_char;
        }
        if readh != 0
            && lineno.wrapping_rem(4 as libc::c_int as libc::c_ulong)
                == 1 as libc::c_int as libc::c_ulong
        {
            strncpy(header.as_mut_ptr(), line, 1024 as libc::c_int as libc::c_ulong);
        } else if lineno.wrapping_rem(4 as libc::c_int as libc::c_ulong)
            == 2 as libc::c_int as libc::c_ulong
        {
            let mut seqlen: size_t = strlen(line);
            if seqlen > 1023 as libc::c_int as libc::c_ulong {
                fprintf(
                    stderr,
                    b"max sequence length exceeded (%d)\n\0" as *const u8
                        as *const libc::c_char,
                    1023 as libc::c_int,
                );
                fprintf(
                    stderr,
                    b"offending sequence:\n%s\n\0" as *const u8 as *const libc::c_char,
                    line,
                );
                abort();
            }
            let mut i: size_t = 0 as libc::c_int as size_t;
            while i < seqlen {
                if valid_DNA_char[*line.offset(i as isize) as libc::c_int as usize] == 0
                {
                    fprintf(
                        stderr,
                        b"invalid input\n\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(
                        stderr,
                        b"offending sequence:\n%s\n\0" as *const u8
                            as *const libc::c_char,
                        line,
                    );
                    abort();
                }
                i = i.wrapping_add(1);
                i;
            }
            strncpy(seq.as_mut_ptr(), line, 1024 as libc::c_int as libc::c_ulong);
        } else if lineno.wrapping_rem(4 as libc::c_int as libc::c_ulong)
            == 0 as libc::c_int as libc::c_ulong
        {
            if readh != 0 {
                let mut status: libc::c_int = snprintf(
                    info.as_mut_ptr(),
                    (2 as libc::c_int * 1024 as libc::c_int + 2 as libc::c_int)
                        as libc::c_ulong,
                    b"%s\n%s\0" as *const u8 as *const libc::c_char,
                    header.as_mut_ptr(),
                    line,
                );
                if status < 0 as libc::c_int
                    || status > 2 as libc::c_int * 1024 as libc::c_int - 1 as libc::c_int
                {
                    fprintf(
                        stderr,
                        b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                            as *const libc::c_char,
                        strerror(*__errno_location()),
                        (*::core::mem::transmute::<
                            &[u8; 11],
                            &[libc::c_char; 11],
                        >(b"read_fastq\0"))
                            .as_ptr(),
                        b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                        1571 as libc::c_int,
                    );
                    krash();
                }
            }
            let mut new: *mut useq_t = new_useq(
                1 as libc::c_int,
                seq.as_mut_ptr(),
                info.as_mut_ptr(),
            );
            if new.is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 11],
                        &[libc::c_char; 11],
                    >(b"read_fastq\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1577 as libc::c_int,
                );
                krash();
            }
            (*new).nids = 1 as libc::c_int as libc::c_uint;
            (*new)
                .seqid = malloc(::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                as *mut libc::c_int;
            if ((*new).seqid).is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 11],
                        &[libc::c_char; 11],
                    >(b"read_fastq\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1583 as libc::c_int,
                );
                krash();
            }
            *((*new).seqid)
                .offset(
                    0 as libc::c_int as isize,
                ) = ((*uSQ).nitems).wrapping_add(1 as libc::c_int as libc::c_ulong)
                as libc::c_int;
            push(new as *mut libc::c_void, &mut uSQ);
        }
    }
    free(line as *mut libc::c_void);
    return uSQ;
}
#[no_mangle]
pub unsafe extern "C" fn read_PE_fastq(
    mut inputf1: *mut FILE,
    mut inputf2: *mut FILE,
    mut uSQ: *mut gstack_t,
) -> *mut gstack_t {
    let mut c1: libc::c_char = fgetc(inputf1) as libc::c_char;
    let mut c2: libc::c_char = fgetc(inputf2) as libc::c_char;
    if c1 as libc::c_int != '@' as i32 || c2 as libc::c_int != '@' as i32 {
        fprintf(
            stderr,
            b"input not a pair of fastq files\n\0" as *const u8 as *const libc::c_char,
        );
        abort();
    }
    if ungetc(c1 as libc::c_int, inputf1) == -(1 as libc::c_int)
        || ungetc(c2 as libc::c_int, inputf2) == -(1 as libc::c_int)
    {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<
                &[u8; 14],
                &[libc::c_char; 14],
            >(b"read_PE_fastq\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1604 as libc::c_int,
        );
        krash();
    }
    let mut nread: ssize_t = 0;
    let mut nchar: size_t = 1024 as libc::c_int as size_t;
    let mut line1: *mut libc::c_char = malloc(1024 as libc::c_int as libc::c_ulong)
        as *mut libc::c_char;
    let mut line2: *mut libc::c_char = malloc(1024 as libc::c_int as libc::c_ulong)
        as *mut libc::c_char;
    if line1.is_null() && line2.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<
                &[u8; 14],
                &[libc::c_char; 14],
            >(b"read_PE_fastq\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1613 as libc::c_int,
        );
        krash();
    }
    let mut seq1: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut seq2: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut seq: [libc::c_char; 2056] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut header1: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut header2: [libc::c_char; 1024] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut info: [libc::c_char; 4096] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let mut lineno: libc::c_int = 0 as libc::c_int;
    let readh: libc::c_int = (OUTPUTT as libc::c_uint
        == NRED_OUTPUT as libc::c_int as libc::c_uint) as libc::c_int;
    let mut sep: [libc::c_char; 10] = [
        0 as libc::c_int as libc::c_char,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    memset(
        sep.as_mut_ptr() as *mut libc::c_void,
        '-' as i32,
        (8 as libc::c_int + 1 as libc::c_int) as libc::c_ulong,
    );
    loop {
        nread = getline(&mut line1, &mut nchar, inputf1);
        if !(nread != -(1 as libc::c_int) as libc::c_long) {
            break;
        }
        lineno += 1;
        lineno;
        if *line1.offset((nread - 1 as libc::c_int as libc::c_long) as isize)
            as libc::c_int == '\n' as i32
        {
            *line1
                .offset(
                    (nread - 1 as libc::c_int as libc::c_long) as isize,
                ) = '\0' as i32 as libc::c_char;
        }
        nread = getline(&mut line2, &mut nchar, inputf2);
        if nread == -(1 as libc::c_int) as libc::c_long {
            fprintf(
                stderr,
                b"non conformable paired-end fastq files\n\0" as *const u8
                    as *const libc::c_char,
            );
            abort();
        }
        if *line2.offset((nread - 1 as libc::c_int as libc::c_long) as isize)
            as libc::c_int == '\n' as i32
        {
            *line2
                .offset(
                    (nread - 1 as libc::c_int as libc::c_long) as isize,
                ) = '\0' as i32 as libc::c_char;
        }
        if readh != 0 && lineno % 4 as libc::c_int == 1 as libc::c_int {
            strncpy(
                header1.as_mut_ptr(),
                line1,
                (1024 as libc::c_int - 1 as libc::c_int) as libc::c_ulong,
            );
            strncpy(
                header2.as_mut_ptr(),
                line2,
                (1024 as libc::c_int - 1 as libc::c_int) as libc::c_ulong,
            );
        } else if lineno % 4 as libc::c_int == 2 as libc::c_int {
            let mut seqlen1: size_t = strlen(line1);
            let mut seqlen2: size_t = strlen(line2);
            if seqlen1 > 1023 as libc::c_int as libc::c_ulong
                || seqlen2 > 1023 as libc::c_int as libc::c_ulong
            {
                fprintf(
                    stderr,
                    b"max sequence length exceeded (%d)\n\0" as *const u8
                        as *const libc::c_char,
                    1023 as libc::c_int,
                );
                fprintf(
                    stderr,
                    b"offending sequences:\n%s\n%s\n\0" as *const u8
                        as *const libc::c_char,
                    line1,
                    line2,
                );
                abort();
            }
            let mut i: size_t = 0 as libc::c_int as size_t;
            while i < seqlen1 {
                if valid_DNA_char[*line1.offset(i as isize) as libc::c_int as usize] == 0
                {
                    fprintf(
                        stderr,
                        b"invalid input\n\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(
                        stderr,
                        b"offending sequence:\n%s\n\0" as *const u8
                            as *const libc::c_char,
                        line1,
                    );
                    abort();
                }
                i = i.wrapping_add(1);
                i;
            }
            let mut i_0: size_t = 0 as libc::c_int as size_t;
            while i_0 < seqlen2 {
                if valid_DNA_char[*line2.offset(i_0 as isize) as libc::c_int as usize]
                    == 0
                {
                    fprintf(
                        stderr,
                        b"invalid input\n\0" as *const u8 as *const libc::c_char,
                    );
                    fprintf(
                        stderr,
                        b"offending sequence:\n%s\n\0" as *const u8
                            as *const libc::c_char,
                        line2,
                    );
                    abort();
                }
                i_0 = i_0.wrapping_add(1);
                i_0;
            }
            strncpy(
                seq1.as_mut_ptr(),
                line1,
                (1024 as libc::c_int - 1 as libc::c_int) as libc::c_ulong,
            );
            strncpy(
                seq2.as_mut_ptr(),
                line2,
                (1024 as libc::c_int - 1 as libc::c_int) as libc::c_ulong,
            );
        } else if lineno % 4 as libc::c_int == 0 as libc::c_int {
            if readh != 0 {
                let mut scheck: libc::c_int = snprintf(
                    info.as_mut_ptr(),
                    (4 as libc::c_int * 1024 as libc::c_int) as libc::c_ulong,
                    b"%s\n%s\n%s\n%s\0" as *const u8 as *const libc::c_char,
                    header1.as_mut_ptr(),
                    line1,
                    header2.as_mut_ptr(),
                    line2,
                );
                if scheck < 0 as libc::c_int
                    || scheck > 4 as libc::c_int * 1024 as libc::c_int - 1 as libc::c_int
                {
                    fprintf(
                        stderr,
                        b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                            as *const libc::c_char,
                        strerror(*__errno_location()),
                        (*::core::mem::transmute::<
                            &[u8; 14],
                            &[libc::c_char; 14],
                        >(b"read_PE_fastq\0"))
                            .as_ptr(),
                        b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                        1679 as libc::c_int,
                    );
                    krash();
                }
            } else {
                let mut scheck_0: libc::c_int = snprintf(
                    info.as_mut_ptr(),
                    (2 as libc::c_int * 1024 as libc::c_int) as libc::c_ulong,
                    b"%s/%s\0" as *const u8 as *const libc::c_char,
                    seq1.as_mut_ptr(),
                    seq2.as_mut_ptr(),
                );
                if scheck_0 < 0 as libc::c_int
                    || scheck_0
                        > 2 as libc::c_int * 1024 as libc::c_int - 1 as libc::c_int
                {
                    fprintf(
                        stderr,
                        b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                            as *const libc::c_char,
                        strerror(*__errno_location()),
                        (*::core::mem::transmute::<
                            &[u8; 14],
                            &[libc::c_char; 14],
                        >(b"read_PE_fastq\0"))
                            .as_ptr(),
                        b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                        1687 as libc::c_int,
                    );
                    krash();
                }
            }
            let mut scheck_1: libc::c_int = snprintf(
                seq.as_mut_ptr(),
                (2 as libc::c_int * 1024 as libc::c_int + 8 as libc::c_int)
                    as libc::c_ulong,
                b"%s%s%s\0" as *const u8 as *const libc::c_char,
                seq1.as_mut_ptr(),
                sep.as_mut_ptr(),
                seq2.as_mut_ptr(),
            );
            if scheck_1 < 0 as libc::c_int
                || scheck_1 > 2 as libc::c_int * 1024 as libc::c_int + 7 as libc::c_int
            {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 14],
                        &[libc::c_char; 14],
                    >(b"read_PE_fastq\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1693 as libc::c_int,
                );
                krash();
            }
            let mut new: *mut useq_t = new_useq(
                1 as libc::c_int,
                seq.as_mut_ptr(),
                info.as_mut_ptr(),
            );
            if new.is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 14],
                        &[libc::c_char; 14],
                    >(b"read_PE_fastq\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1698 as libc::c_int,
                );
                krash();
            }
            (*new).nids = 1 as libc::c_int as libc::c_uint;
            (*new)
                .seqid = malloc(::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
                as *mut libc::c_int;
            if ((*new).seqid).is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 14],
                        &[libc::c_char; 14],
                    >(b"read_PE_fastq\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1704 as libc::c_int,
                );
                krash();
            }
            *((*new).seqid)
                .offset(
                    0 as libc::c_int as isize,
                ) = ((*uSQ).nitems).wrapping_add(1 as libc::c_int as libc::c_ulong)
                as libc::c_int;
            push(new as *mut libc::c_void, &mut uSQ);
        }
    }
    free(line1 as *mut libc::c_void);
    free(line2 as *mut libc::c_void);
    return uSQ;
}
#[no_mangle]
pub unsafe extern "C" fn read_file(
    mut inputf1: *mut FILE,
    mut inputf2: *mut FILE,
    verbose: libc::c_int,
) -> *mut gstack_t {
    if !inputf2.is_null() {
        FORMAT = PE_FASTQ;
    } else {
        let mut c: libc::c_char = fgetc(inputf1) as libc::c_char;
        match c as libc::c_int {
            -1 => return 0 as *mut gstack_t,
            62 => {
                FORMAT = FASTA;
                if verbose != 0 {
                    fprintf(
                        stderr,
                        b"FASTA format detected\n\0" as *const u8 as *const libc::c_char,
                    );
                }
            }
            64 => {
                FORMAT = FASTQ;
                if verbose != 0 {
                    fprintf(
                        stderr,
                        b"FASTQ format detected\n\0" as *const u8 as *const libc::c_char,
                    );
                }
            }
            _ => {
                FORMAT = RAW;
                if verbose != 0 {
                    fprintf(
                        stderr,
                        b"raw format detected\n\0" as *const u8 as *const libc::c_char,
                    );
                }
            }
        }
        if ungetc(c as libc::c_int, inputf1) == -(1 as libc::c_int) {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<
                    &[u8; 10],
                    &[libc::c_char; 10],
                >(b"read_file\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                1746 as libc::c_int,
            );
            krash();
        }
    }
    let mut uSQ: *mut gstack_t = new_gstack();
    if uSQ.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 10], &[libc::c_char; 10]>(b"read_file\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1753 as libc::c_int,
        );
        krash();
    }
    if FORMAT as libc::c_uint == RAW as libc::c_int as libc::c_uint {
        return read_rawseq(inputf1, uSQ);
    }
    if FORMAT as libc::c_uint == FASTA as libc::c_int as libc::c_uint {
        return read_fasta(inputf1, uSQ);
    }
    if FORMAT as libc::c_uint == FASTQ as libc::c_int as libc::c_uint {
        return read_fastq(inputf1, uSQ);
    }
    if FORMAT as libc::c_uint == PE_FASTQ as libc::c_int as libc::c_uint {
        return read_PE_fastq(inputf1, inputf2, uSQ);
    }
    return 0 as *mut gstack_t;
}
#[no_mangle]
pub unsafe extern "C" fn pad_useq(
    mut useqS: *mut gstack_t,
    mut median: *mut libc::c_int,
) -> libc::c_int {
    let mut maxlen: libc::c_int = 0 as libc::c_int;
    let mut i: size_t = 0 as libc::c_int as size_t;
    while i < (*useqS).nitems {
        let mut u: *mut useq_t = *((*useqS).items).as_mut_ptr().offset(i as isize)
            as *mut useq_t;
        let mut len: libc::c_int = strlen((*u).seq) as libc::c_int;
        if len > maxlen {
            maxlen = len;
        }
        i = i.wrapping_add(1);
        i;
    }
    let mut count: *mut size_t = calloc(
        (maxlen + 1 as libc::c_int) as libc::c_ulong,
        ::core::mem::size_of::<size_t>() as libc::c_ulong,
    ) as *mut size_t;
    let mut spaces: *mut libc::c_char = malloc(
        (maxlen + 1 as libc::c_int) as libc::c_ulong,
    ) as *mut libc::c_char;
    if spaces.is_null() || count.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 9], &[libc::c_char; 9]>(b"pad_useq\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1784 as libc::c_int,
        );
        krash();
    }
    let mut i_0: libc::c_int = 0 as libc::c_int;
    while i_0 < maxlen {
        *spaces.offset(i_0 as isize) = ' ' as i32 as libc::c_char;
        i_0 += 1;
        i_0;
    }
    *spaces.offset(maxlen as isize) = '\0' as i32 as libc::c_char;
    let mut i_1: size_t = 0 as libc::c_int as size_t;
    while i_1 < (*useqS).nitems {
        let mut u_0: *mut useq_t = *((*useqS).items).as_mut_ptr().offset(i_1 as isize)
            as *mut useq_t;
        let mut len_0: libc::c_int = strlen((*u_0).seq) as libc::c_int;
        let ref mut fresh29 = *count.offset(len_0 as isize);
        *fresh29 = (*fresh29).wrapping_add(1);
        *fresh29;
        if !(len_0 == maxlen) {
            let mut padded: *mut libc::c_char = malloc(
                (maxlen + 1 as libc::c_int) as libc::c_ulong,
            ) as *mut libc::c_char;
            if padded.is_null() {
                fprintf(
                    stderr,
                    b"error `%s' in %s() (%s:%d)\n\0" as *const u8
                        as *const libc::c_char,
                    strerror(*__errno_location()),
                    (*::core::mem::transmute::<
                        &[u8; 9],
                        &[libc::c_char; 9],
                    >(b"pad_useq\0"))
                        .as_ptr(),
                    b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                    1801 as libc::c_int,
                );
                krash();
            }
            memcpy(
                padded as *mut libc::c_void,
                spaces as *const libc::c_void,
                (maxlen + 1 as libc::c_int) as libc::c_ulong,
            );
            memcpy(
                padded.offset(maxlen as isize).offset(-(len_0 as isize))
                    as *mut libc::c_void,
                (*u_0).seq as *const libc::c_void,
                len_0 as libc::c_ulong,
            );
            free((*u_0).seq as *mut libc::c_void);
            (*u_0).seq = padded;
        }
        i_1 = i_1.wrapping_add(1);
        i_1;
    }
    *median = 0 as libc::c_int;
    let mut ccount: size_t = 0 as libc::c_int as size_t;
    loop {
        *median += 1;
        ccount = (ccount as libc::c_ulong).wrapping_add(*count.offset(*median as isize))
            as size_t as size_t;
        if !(ccount < ((*useqS).nitems).wrapping_div(2 as libc::c_int as libc::c_ulong))
        {
            break;
        }
    }
    free(count as *mut libc::c_void);
    free(spaces as *mut libc::c_void);
    return maxlen;
}
#[no_mangle]
pub unsafe extern "C" fn unpad_useq(mut useqS: *mut gstack_t) {
    let mut len: libc::c_int = strlen(
        (*(*((*useqS).items).as_mut_ptr().offset(0 as libc::c_int as isize)
            as *mut useq_t))
            .seq,
    ) as libc::c_int;
    let mut i: size_t = 0 as libc::c_int as size_t;
    while i < (*useqS).nitems {
        let mut u: *mut useq_t = *((*useqS).items).as_mut_ptr().offset(i as isize)
            as *mut useq_t;
        let mut pad: libc::c_int = 0 as libc::c_int;
        while *((*u).seq).offset(pad as isize) as libc::c_int == ' ' as i32 {
            pad += 1;
            pad;
        }
        let mut unpadded: *mut libc::c_char = calloc(
            (len - pad + 1 as libc::c_int) as libc::c_ulong,
            ::core::mem::size_of::<libc::c_char>() as libc::c_ulong,
        ) as *mut libc::c_char;
        if unpadded.is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<
                    &[u8; 11],
                    &[libc::c_char; 11],
                >(b"unpad_useq\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                1836 as libc::c_int,
            );
            krash();
        }
        memcpy(
            unpadded as *mut libc::c_void,
            ((*u).seq).offset(pad as isize) as *const libc::c_void,
            (len - pad + 1 as libc::c_int) as libc::c_ulong,
        );
        free((*u).seq as *mut libc::c_void);
        (*u).seq = unpadded;
        i = i.wrapping_add(1);
        i;
    }
}
#[no_mangle]
pub unsafe extern "C" fn transfer_useq_ids(mut ud: *mut useq_t, mut us: *mut useq_t) {
    if (*us).nids < 1 as libc::c_int as libc::c_uint {
        return;
    }
    (*ud)
        .seqid = realloc(
        (*ud).seqid as *mut libc::c_void,
        (((*ud).nids).wrapping_add((*us).nids) as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong),
    ) as *mut libc::c_int;
    if ((*ud).seqid).is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<
                &[u8; 18],
                &[libc::c_char; 18],
            >(b"transfer_useq_ids\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1856 as libc::c_int,
        );
        krash();
    }
    memcpy(
        ((*ud).seqid).offset((*ud).nids as isize) as *mut libc::c_void,
        (*us).seqid as *const libc::c_void,
        ((*us).nids as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong),
    );
    (*ud).nids = ((*ud).nids).wrapping_add((*us).nids);
    (*us).nids = 0 as libc::c_int as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn transfer_sorted_useq_ids(
    mut ud: *mut useq_t,
    mut us: *mut useq_t,
) {
    if (*us).nids < 1 as libc::c_int as libc::c_uint {
        return;
    }
    let mut buf: *mut libc::c_int = calloc(
        ((*ud).nids).wrapping_add((*us).nids) as libc::c_ulong,
        ::core::mem::size_of::<libc::c_int>() as libc::c_ulong,
    ) as *mut libc::c_int;
    if buf.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<
                &[u8; 25],
                &[libc::c_char; 25],
            >(b"transfer_sorted_useq_ids\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            1876 as libc::c_int,
        );
        krash();
    }
    let mut s: *mut libc::c_int = 0 as *mut libc::c_int;
    let mut d: *mut libc::c_int = 0 as *mut libc::c_int;
    d = (*ud).seqid;
    s = (*us).seqid;
    let mut i: uint32_t = 0 as libc::c_int as uint32_t;
    let mut j: uint32_t = 0 as libc::c_int as uint32_t;
    let mut k: uint32_t = 0 as libc::c_int as uint32_t;
    while i < (*ud).nids && j < (*us).nids {
        if *d.offset(i as isize) < *s.offset(j as isize) {
            let fresh30 = i;
            i = i.wrapping_add(1);
            let fresh31 = k;
            k = k.wrapping_add(1);
            *buf.offset(fresh31 as isize) = *d.offset(fresh30 as isize);
        } else if *d.offset(i as isize) > *s.offset(j as isize) {
            let fresh32 = j;
            j = j.wrapping_add(1);
            let fresh33 = k;
            k = k.wrapping_add(1);
            *buf.offset(fresh33 as isize) = *s.offset(fresh32 as isize);
        } else {
            let fresh34 = k;
            k = k.wrapping_add(1);
            *buf.offset(fresh34 as isize) = *d.offset(i as isize);
            i = i.wrapping_add(1);
            i;
            j = j.wrapping_add(1);
            j;
        }
    }
    while i < (*ud).nids {
        let fresh35 = k;
        k = k.wrapping_add(1);
        *buf.offset(fresh35 as isize) = *d.offset(i as isize);
        i = i.wrapping_add(1);
        i;
    }
    while j < (*us).nids {
        let fresh36 = k;
        k = k.wrapping_add(1);
        *buf.offset(fresh36 as isize) = *s.offset(j as isize);
        j = j.wrapping_add(1);
        j;
    }
    free((*ud).seqid as *mut libc::c_void);
    (*ud).seqid = buf;
    (*ud).nids = k;
    (*us).nids = 0 as libc::c_int as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn transfer_counts_and_update_canonicals(mut useq: *mut useq_t) {
    if (*useq).sphere_d != 0 {
        return;
    }
    if ((*useq).matches).is_null() {
        (*useq).canonical = useq;
        return;
    }
    if !((*useq).canonical).is_null() {
        (*(*useq).canonical).count += (*useq).count;
        (*useq).count = 0 as libc::c_int as ssize_t;
        (*(*useq).canonical).sphere_c += 1 as libc::c_int as libc::c_long;
        return;
    }
    let mut matches: *mut gstack_t = 0 as *mut gstack_t;
    let mut i: libc::c_int = 0 as libc::c_int;
    loop {
        matches = *((*useq).matches).offset(i as isize);
        if !(matches != TOWER_TOP) {
            break;
        }
        if (*matches).nitems > 0 as libc::c_int as libc::c_ulong {
            break;
        }
        i += 1;
        i;
    }
    let mut i_0: size_t = 0 as libc::c_int as size_t;
    while i_0 < (*matches).nitems {
        let mut match_0: *mut useq_t = *((*matches).items)
            .as_mut_ptr()
            .offset(i_0 as isize) as *mut useq_t;
        transfer_counts_and_update_canonicals(match_0);
        i_0 = i_0.wrapping_add(1);
        i_0;
    }
    let mut canonical: *mut useq_t = (*(*((*matches).items)
        .as_mut_ptr()
        .offset(0 as libc::c_int as isize) as *mut useq_t))
        .canonical;
    let mut i_1: size_t = 1 as libc::c_int as size_t;
    while i_1 < (*matches).nitems {
        let mut match_1: *mut useq_t = *((*matches).items)
            .as_mut_ptr()
            .offset(i_1 as isize) as *mut useq_t;
        if ((*match_1).canonical).is_null() || (*match_1).canonical != canonical {
            canonical = 0 as *mut useq_t;
            break;
        } else {
            i_1 = i_1.wrapping_add(1);
            i_1;
        }
    }
    if !canonical.is_null() {
        (*useq).canonical = canonical;
        (*canonical).count += (*useq).count;
        (*useq).count = 0 as libc::c_int as ssize_t;
        (*canonical).sphere_c += 1 as libc::c_int as libc::c_long;
    } else {
        (*useq).sphere_d = 1 as libc::c_int as ssize_t;
    };
}
#[no_mangle]
pub unsafe extern "C" fn mp_resolve_ambiguous(mut useq: *mut useq_t) {
    if !((*useq).canonical).is_null() {
        return;
    }
    let mut matches: *mut gstack_t = 0 as *mut gstack_t;
    let mut i: libc::c_int = 0 as libc::c_int;
    loop {
        matches = *((*useq).matches).offset(i as isize);
        if !(matches != TOWER_TOP) {
            break;
        }
        if (*matches).nitems > 0 as libc::c_int as libc::c_ulong {
            break;
        }
        i += 1;
        i;
    }
    let mut i_0: size_t = 0 as libc::c_int as size_t;
    while i_0 < (*matches).nitems {
        let mut match_0: *mut useq_t = *((*matches).items)
            .as_mut_ptr()
            .offset(i_0 as isize) as *mut useq_t;
        if ((*match_0).canonical).is_null() {
            mp_resolve_ambiguous(match_0);
        }
        i_0 = i_0.wrapping_add(1);
        i_0;
    }
    let mut canonical: *mut useq_t = 0 as *mut useq_t;
    let mut cnt_max: libc::c_int = 0 as libc::c_int;
    let mut ssz_max: libc::c_int = 0 as libc::c_int;
    let mut i_1: size_t = 0 as libc::c_int as size_t;
    while i_1 < (*matches).nitems {
        let mut match_1: *mut useq_t = *((*matches).items)
            .as_mut_ptr()
            .offset(i_1 as isize) as *mut useq_t;
        if (*match_1).canonical == match_1 {
            if (*match_1).count > cnt_max as libc::c_long {
                canonical = match_1;
                cnt_max = (*canonical).count as libc::c_int;
                ssz_max = (*canonical).sphere_c as libc::c_int;
            } else if (*match_1).count == cnt_max as libc::c_long && match_1 != canonical
            {
                if (*match_1).sphere_c > ssz_max as libc::c_long {
                    canonical = match_1;
                    ssz_max = (*canonical).sphere_c as libc::c_int;
                } else if (*match_1).sphere_c == ssz_max as libc::c_long {
                    canonical = 0 as *mut useq_t;
                }
            }
        }
        i_1 = i_1.wrapping_add(1);
        i_1;
    }
    if canonical.is_null() {
        cnt_max = 0 as libc::c_int;
        let mut i_2: size_t = 0 as libc::c_int as size_t;
        while i_2 < (*matches).nitems {
            let mut match_canon: *mut useq_t = (*(*((*matches).items)
                .as_mut_ptr()
                .offset(i_2 as isize) as *mut useq_t))
                .canonical;
            if (*match_canon).count > cnt_max as libc::c_long {
                cnt_max = (*match_canon).count as libc::c_int;
                canonical = match_canon;
            }
            i_2 = i_2.wrapping_add(1);
            i_2;
        }
    }
    if canonical.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<
                &[u8; 21],
                &[libc::c_char; 21],
            >(b"mp_resolve_ambiguous\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            2047 as libc::c_int,
        );
        krash();
    }
    (*useq).canonical = canonical;
    (*canonical).count += (*useq).count;
    (*useq).count = 0 as libc::c_int as ssize_t;
    (*canonical).sphere_c += 1 as libc::c_int as libc::c_long;
}
#[no_mangle]
pub unsafe extern "C" fn addmatch(
    mut to: *mut useq_t,
    mut from: *mut useq_t,
    mut dist: libc::c_int,
    mut maxtau: libc::c_int,
) -> libc::c_int {
    if dist > maxtau {
        return 1 as libc::c_int;
    }
    if ((*to).matches).is_null() {
        (*to).matches = new_tower(maxtau + 1 as libc::c_int);
    }
    return push(from as *mut libc::c_void, ((*to).matches).offset(dist as isize));
}
#[no_mangle]
pub unsafe extern "C" fn new_lookup(
    mut slen: libc::c_int,
    mut maxlen: libc::c_int,
    mut tau: libc::c_int,
) -> *mut lookup_t {
    let mut lut: *mut lookup_t = malloc(
        (2 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
            .wrapping_add(::core::mem::size_of::<*mut libc::c_int>() as libc::c_ulong)
            .wrapping_add(
                ((tau + 1 as libc::c_int) as libc::c_ulong)
                    .wrapping_mul(
                        ::core::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,
                    ),
            ),
    ) as *mut lookup_t;
    if lut.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 11], &[libc::c_char; 11]>(b"new_lookup\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            2094 as libc::c_int,
        );
        return 0 as *mut lookup_t;
    }
    let mut k: libc::c_int = slen / (tau + 1 as libc::c_int);
    let mut rem: libc::c_int = tau - slen % (tau + 1 as libc::c_int);
    (*lut).slen = maxlen;
    (*lut).kmers = tau + 1 as libc::c_int;
    (*lut)
        .klen = calloc(
        (*lut).kmers as libc::c_ulong,
        ::core::mem::size_of::<libc::c_int>() as libc::c_ulong,
    ) as *mut libc::c_int;
    if k > 14 as libc::c_int {
        let mut i: libc::c_int = 0 as libc::c_int;
        while i < tau + 1 as libc::c_int {
            *((*lut).klen).offset(i as isize) = 14 as libc::c_int;
            i += 1;
            i;
        }
    } else {
        let mut i_0: libc::c_int = 0 as libc::c_int;
        while i_0 < tau + 1 as libc::c_int {
            let fresh37 = rem;
            rem = rem - 1;
            *((*lut).klen)
                .offset(i_0 as isize) = k - (fresh37 > 0 as libc::c_int) as libc::c_int;
            i_0 += 1;
            i_0;
        }
    }
    let mut i_1: libc::c_int = 0 as libc::c_int;
    while i_1 < tau + 1 as libc::c_int {
        let mut nmemb: size_t = ((1 as libc::c_int)
            << (if 0 as libc::c_int
                > 2 as libc::c_int * *((*lut).klen).offset(i_1 as isize)
                    - 3 as libc::c_int
            {
                0 as libc::c_int
            } else {
                2 as libc::c_int * *((*lut).klen).offset(i_1 as isize) - 3 as libc::c_int
            })) as size_t;
        let ref mut fresh38 = *((*lut).lut).as_mut_ptr().offset(i_1 as isize);
        *fresh38 = calloc(
            nmemb,
            ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
        ) as *mut libc::c_uchar;
        if (*((*lut).lut).as_mut_ptr().offset(i_1 as isize)).is_null() {
            loop {
                i_1 -= 1;
                if !(i_1 >= 0 as libc::c_int) {
                    break;
                }
                free(
                    *((*lut).lut).as_mut_ptr().offset(i_1 as isize) as *mut libc::c_void,
                );
            }
            free(lut as *mut libc::c_void);
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<
                    &[u8; 11],
                    &[libc::c_char; 11],
                >(b"new_lookup\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                2124 as libc::c_int,
            );
            return 0 as *mut lookup_t;
        }
        i_1 += 1;
        i_1;
    }
    return lut;
}
#[no_mangle]
pub unsafe extern "C" fn destroy_lookup(mut lut: *mut lookup_t) {
    let mut i: libc::c_int = 0 as libc::c_int;
    while i < (*lut).kmers {
        free(*((*lut).lut).as_mut_ptr().offset(i as isize) as *mut libc::c_void);
        i += 1;
        i;
    }
    free((*lut).klen as *mut libc::c_void);
    free(lut as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn lut_search(
    mut lut: *mut lookup_t,
    mut query: *mut useq_t,
) -> libc::c_int {
    let mut offset: libc::c_int = (*lut).slen;
    let mut i: libc::c_int = (*lut).kmers - 1 as libc::c_int;
    while i >= 0 as libc::c_int {
        offset -= *((*lut).klen).offset(i as isize);
        let mut j: libc::c_int = -((*lut).kmers - 1 as libc::c_int - i);
        while j <= (*lut).kmers - 1 as libc::c_int - i {
            let mut seqid: libc::c_int = seq2id(
                ((*query).seq).offset(offset as isize).offset(j as isize),
                *((*lut).klen).offset(i as isize),
            );
            if seqid == -(2 as libc::c_int) {
                return -(1 as libc::c_int);
            }
            if !(seqid == -(1 as libc::c_int)) {
                if *(*((*lut).lut).as_mut_ptr().offset(i as isize))
                    .offset((seqid / 8 as libc::c_int) as isize) as libc::c_int
                    >> seqid % 8 as libc::c_int & 1 as libc::c_int != 0
                {
                    return 1 as libc::c_int;
                }
            }
            j += 1;
            j;
        }
        i -= 1;
        i;
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn lut_insert(
    mut lut: *mut lookup_t,
    mut query: *mut useq_t,
) -> libc::c_int {
    let mut seqlen: libc::c_int = strlen((*query).seq) as libc::c_int;
    let mut offset: libc::c_int = (*lut).slen;
    let mut i: libc::c_int = (*lut).kmers - 1 as libc::c_int;
    while i >= 0 as libc::c_int {
        offset -= *((*lut).klen).offset(i as isize);
        if !(offset + *((*lut).klen).offset(i as isize) > seqlen) {
            let mut seqid: libc::c_int = seq2id(
                ((*query).seq).offset(offset as isize),
                *((*lut).klen).offset(i as isize),
            );
            if seqid >= 0 as libc::c_int {
                let ref mut fresh39 = *(*((*lut).lut).as_mut_ptr().offset(i as isize))
                    .offset((seqid / 8 as libc::c_int) as isize);
                *fresh39 = (*fresh39 as libc::c_int
                    | (1 as libc::c_int) << seqid % 8 as libc::c_int) as libc::c_uchar;
            } else if seqid == -(2 as libc::c_int) {
                return 1 as libc::c_int
            }
        }
        i -= 1;
        i;
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn seq2id(
    mut seq: *mut libc::c_char,
    mut slen: libc::c_int,
) -> libc::c_int {
    let mut seqid: libc::c_int = 0 as libc::c_int;
    let mut imin: libc::c_int = if slen > 16 as libc::c_int {
        slen - 16 as libc::c_int
    } else {
        0 as libc::c_int
    };
    let mut i: libc::c_int = imin;
    while i < slen {
        if !(*seq.offset(i as isize) as libc::c_int == 'A' as i32
            || *seq.offset(i as isize) as libc::c_int == 'a' as i32
            || *seq.offset(i as isize) as libc::c_int == ' ' as i32)
        {
            if *seq.offset(i as isize) as libc::c_int == 'C' as i32
                || *seq.offset(i as isize) as libc::c_int == 'c' as i32
            {
                seqid += 1 as libc::c_int;
            } else if *seq.offset(i as isize) as libc::c_int == 'G' as i32
                || *seq.offset(i as isize) as libc::c_int == 'g' as i32
            {
                seqid += 2 as libc::c_int;
            } else if *seq.offset(i as isize) as libc::c_int == 'T' as i32
                || *seq.offset(i as isize) as libc::c_int == 't' as i32
            {
                seqid += 3 as libc::c_int;
            } else {
                return if *seq.offset(i as isize) as libc::c_int == '\0' as i32 {
                    -(2 as libc::c_int)
                } else {
                    -(1 as libc::c_int)
                }
            }
        }
        if i < slen - 1 as libc::c_int {
            seqid <<= 2 as libc::c_int;
        }
        i += 1;
        i;
    }
    return seqid;
}
#[no_mangle]
pub unsafe extern "C" fn new_useq(
    mut count: libc::c_int,
    mut seq: *mut libc::c_char,
    mut info: *mut libc::c_char,
) -> *mut useq_t {
    if seq.is_null() {
        return 0 as *mut useq_t;
    }
    let mut new: *mut useq_t = calloc(
        1 as libc::c_int as libc::c_ulong,
        ::core::mem::size_of::<useq_t>() as libc::c_ulong,
    ) as *mut useq_t;
    if new.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 9], &[libc::c_char; 9]>(b"new_useq\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            2238 as libc::c_int,
        );
        krash();
    }
    let mut slen: size_t = strlen(seq);
    (*new)
        .seq = malloc(slen.wrapping_add(1 as libc::c_int as libc::c_ulong))
        as *mut libc::c_char;
    let mut i: size_t = 0 as libc::c_int as size_t;
    while i < slen {
        *((*new).seq)
            .offset(
                i as isize,
            ) = capitalize[*seq.offset(i as isize) as uint8_t as usize];
        i = i.wrapping_add(1);
        i;
    }
    *((*new).seq).offset(slen as isize) = 0 as libc::c_int as libc::c_char;
    (*new).count = count as ssize_t;
    (*new).nids = 0 as libc::c_int as libc::c_uint;
    (*new).sphere_c = 0 as libc::c_int as ssize_t;
    (*new).sphere_d = 0 as libc::c_int as ssize_t;
    (*new).seqid = 0 as *mut libc::c_int;
    if !info.is_null() {
        (*new).info = strdup(info);
        if ((*new).info).is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<&[u8; 9], &[libc::c_char; 9]>(b"new_useq\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                2254 as libc::c_int,
            );
            krash();
        }
    }
    return new;
}
#[no_mangle]
pub unsafe extern "C" fn destroy_useq(mut useq: *mut useq_t) {
    if !((*useq).matches).is_null() {
        destroy_tower((*useq).matches);
    }
    if !((*useq).info).is_null() {
        free((*useq).info as *mut libc::c_void);
    }
    free((*useq).seqid as *mut libc::c_void);
    free((*useq).seq as *mut libc::c_void);
    free(useq as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn canonical_order(
    mut a: *const libc::c_void,
    mut b: *const libc::c_void,
) -> libc::c_int {
    let mut u1: *mut useq_t = *(a as *mut *mut useq_t);
    let mut u2: *mut useq_t = *(b as *mut *mut useq_t);
    if (*u1).canonical == (*u2).canonical {
        return strcmp((*u1).seq, (*u2).seq);
    }
    if ((*u1).canonical).is_null() {
        return 1 as libc::c_int;
    }
    if ((*u2).canonical).is_null() {
        return -(1 as libc::c_int);
    }
    if (*(*u1).canonical).count == (*(*u2).canonical).count {
        return strcmp((*(*u1).canonical).seq, (*(*u2).canonical).seq);
    }
    if (*(*u1).canonical).count > (*(*u2).canonical).count {
        return -(1 as libc::c_int);
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn sphere_size_order(
    mut a: *const libc::c_void,
    mut b: *const libc::c_void,
) -> libc::c_int {
    let mut u1: *mut useq_t = *(a as *mut *mut useq_t);
    let mut u2: *mut useq_t = *(b as *mut *mut useq_t);
    if (*u1).sphere_c == (*u2).sphere_c {
        return strcmp((*u1).seq, (*u2).seq)
    } else {
        return if (*u1).sphere_c < (*u2).sphere_c {
            1 as libc::c_int
        } else {
            -(1 as libc::c_int)
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn count_order(
    mut a: *const libc::c_void,
    mut b: *const libc::c_void,
) -> libc::c_int {
    let mut u1: *mut useq_t = *(a as *mut *mut useq_t);
    let mut u2: *mut useq_t = *(b as *mut *mut useq_t);
    if (*u1).count == (*u2).count {
        return strcmp((*u1).seq, (*u2).seq)
    } else {
        return if (*u1).count < (*u2).count {
            1 as libc::c_int
        } else {
            -(1 as libc::c_int)
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn count_order_spheres(
    mut a: *const libc::c_void,
    mut b: *const libc::c_void,
) -> libc::c_int {
    let mut u1: *mut useq_t = *(a as *mut *mut useq_t);
    let mut u2: *mut useq_t = *(b as *mut *mut useq_t);
    if (*u1).count == (*u2).count {
        if ((*u2).matches).is_null() {
            return -(1 as libc::c_int);
        }
        if ((*u1).matches).is_null() {
            return 1 as libc::c_int;
        }
        let mut cnt1: libc::c_long = 0 as libc::c_int as libc::c_long;
        let mut cnt2: libc::c_long = 0 as libc::c_int as libc::c_long;
        let mut matches: *mut gstack_t = 0 as *mut gstack_t;
        let mut j: libc::c_int = 0 as libc::c_int;
        loop {
            matches = *((*u1).matches).offset(j as isize);
            if !(matches != TOWER_TOP) {
                break;
            }
            let mut k: size_t = 0 as libc::c_int as size_t;
            while k < (*matches).nitems {
                cnt1
                    += (*(*((*matches).items).as_mut_ptr().offset(k as isize)
                        as *mut useq_t))
                        .count;
                k = k.wrapping_add(1);
                k;
            }
            j += 1;
            j;
        }
        let mut j_0: libc::c_int = 0 as libc::c_int;
        loop {
            matches = *((*u2).matches).offset(j_0 as isize);
            if !(matches != TOWER_TOP) {
                break;
            }
            let mut k_0: size_t = 0 as libc::c_int as size_t;
            while k_0 < (*matches).nitems {
                cnt2
                    += (*(*((*matches).items).as_mut_ptr().offset(k_0 as isize)
                        as *mut useq_t))
                        .count;
                k_0 = k_0.wrapping_add(1);
                k_0;
            }
            j_0 += 1;
            j_0;
        }
        return if cnt1 < cnt2 { 1 as libc::c_int } else { -(1 as libc::c_int) };
    } else {
        return if (*u1).count < (*u2).count {
            1 as libc::c_int
        } else {
            -(1 as libc::c_int)
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn cluster_count(
    mut a: *const libc::c_void,
    mut b: *const libc::c_void,
) -> libc::c_int {
    let mut s1: *mut gstack_t = *(a as *mut *mut gstack_t);
    let mut s2: *mut gstack_t = *(b as *mut *mut gstack_t);
    if (*(*((*s1).items).as_mut_ptr().offset(0 as libc::c_int as isize) as *mut useq_t))
        .count
        < (*(*((*s2).items).as_mut_ptr().offset(0 as libc::c_int as isize)
            as *mut useq_t))
            .count
    {
        return 1 as libc::c_int
    } else {
        return -(1 as libc::c_int)
    };
}
#[no_mangle]
pub unsafe extern "C" fn int_ascending(
    mut a: *const libc::c_void,
    mut b: *const libc::c_void,
) -> libc::c_int {
    if *(a as *mut libc::c_int) < *(b as *mut libc::c_int) {
        return -(1 as libc::c_int)
    } else {
        return 1 as libc::c_int
    };
}
#[no_mangle]
pub unsafe extern "C" fn idstack_new(mut n_elm: size_t) -> *mut idstack_t {
    let mut stack: *mut idstack_t = malloc(
        ::core::mem::size_of::<idstack_t>() as libc::c_ulong,
    ) as *mut idstack_t;
    if stack.is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 12], &[libc::c_char; 12]>(b"idstack_new\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            2361 as libc::c_int,
        );
        krash();
    }
    (*stack)
        .elm = calloc(n_elm, ::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
        as *mut libc::c_int;
    if ((*stack).elm).is_null() {
        fprintf(
            stderr,
            b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
            strerror(*__errno_location()),
            (*::core::mem::transmute::<&[u8; 12], &[libc::c_char; 12]>(b"idstack_new\0"))
                .as_ptr(),
            b"src/starcode.c\0" as *const u8 as *const libc::c_char,
            2366 as libc::c_int,
        );
        krash();
    }
    (*stack).pos = 0 as libc::c_int as size_t;
    (*stack).max = n_elm;
    return stack;
}
#[no_mangle]
pub unsafe extern "C" fn idstack_push(
    mut vals: *mut libc::c_int,
    mut n_val: size_t,
    mut stack: *mut idstack_t,
) {
    let mut newsize: size_t = (*stack).max;
    while ((*stack).pos).wrapping_add(n_val) > newsize {
        newsize = (newsize as libc::c_ulong)
            .wrapping_mul(2 as libc::c_int as libc::c_ulong) as size_t as size_t;
    }
    if newsize > (*stack).max {
        (*stack)
            .elm = realloc(
            (*stack).elm as *mut libc::c_void,
            newsize.wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong),
        ) as *mut libc::c_int;
        if ((*stack).elm).is_null() {
            fprintf(
                stderr,
                b"error `%s' in %s() (%s:%d)\n\0" as *const u8 as *const libc::c_char,
                strerror(*__errno_location()),
                (*::core::mem::transmute::<
                    &[u8; 13],
                    &[libc::c_char; 13],
                >(b"idstack_push\0"))
                    .as_ptr(),
                b"src/starcode.c\0" as *const u8 as *const libc::c_char,
                2384 as libc::c_int,
            );
            krash();
        }
        (*stack).max = newsize;
    }
    memcpy(
        ((*stack).elm).offset((*stack).pos as isize) as *mut libc::c_void,
        vals as *const libc::c_void,
        n_val.wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong),
    );
    (*stack)
        .pos = ((*stack).pos as libc::c_ulong).wrapping_add(n_val) as size_t as size_t;
}
#[no_mangle]
pub unsafe extern "C" fn idstack_free(mut stack: *mut idstack_t) {
    free((*stack).elm as *mut libc::c_void);
    free(stack as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn krash() -> ! {
    fprintf(
        stderr,
        b"starcode has crashed, please contact guillaume.filion@gmail.com for support with this issue.\n\0"
            as *const u8 as *const libc::c_char,
    );
    abort();
}
